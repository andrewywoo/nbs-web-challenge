{"version":3,"sources":["components/NavigationBar/NavigationBar.js","components/UI/Spinner/Spinner.js","containers/ArtistInfo/ArtistInfo.js","components/BarChart/Rect/Rect.js","components/BarChart/BarChart.js","components/MetricViewBar/MetricViewBar.js","containers/SocialMediaMetrics/SocialMediaMetrics.js","components/BubbleChart/BubbleChart.js","containers/TrackMetrics/TrackMetrics.js","App.js","index.js"],"names":["navigationBar","props","react_default","a","createElement","className","id","type","placeholder","onChange","handleArtistChange","href","spinner","artistInfo","image","info","genre","content","isLoaded","Spinner_Spinner","height","src","images","alt","name","genres","join","Fragment","style","textAlign","Rect","state","x","y","width","fill","_this$state","this","yExtent","d3","refs","rect","attr","yScale","transition","duration","_this$state2","ref","nextProps","prevState","Component","margin","BarChart","bars","xScale","range","wScale","paddingInner","paddingOuter","accentScale","xAxis","_this","tickFormat","yAxis","nextState","call","_this2","transform","concat","map","d","i","BarChart_Rect_Rect","key","bandwidth","data","domain","date","value","metricViewBar","buttons","metricNames","obj","onClick","clicked","bind","fullName","socialMediaMetrics","console","log","metrics","getChartData","metricId","reduce","acc","metric","_iteratorNormalCompletion","_didIteratorError","_iteratorError","undefined","_step","_iterator","metricMetadata","items","Symbol","iterator","next","done","m","push","err","return","sort","b","components_BarChart_BarChart","Range_default","defaultValue","min","max","allowCross","onRangeChange","MetricViewBar_MetricViewBar","handleMetricIdChange","simulation","force","strength","BubbleChart","circles","rScale","cScale","forceTick","node","radius","on","renderCircles","nodes","alpha","restart","_this3","_this4","svgContainer","selectAll","exit","remove","nodeEnter","enter","append","label","merge","select","text","length","substring","top15","summary","TW","slice","metadata","asset_name","trackMetrics","circleData","getTrackData","components_BubbleChart_BubbleChart","handleBubbles","App","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","artist","artistId","trackMetricId","startDate","moment","format","endDate","bubbleData","event","emitDebouncedSearch","target","handleArtistSearch","val","setState","dataArr","filter","item","timeseries","deltas","totals","keys","Date","e","debounce","grabMetricMetadata","grabArtistMetric","prevProps","axios","get","then","response","catch","error","artists","resetArtistInfo","grabTrackMetrics","grabArtistInfo","_this5","NavigationBar_NavigationBar","ArtistInfo_ArtistInfo","SocialMediaMetrics_SocialMediaMetrics","onRangeChang","TrackMetrics_TrackMetrics","defaults","baseURL","params","ReactDOM","render","src_App_0","document","getElementById"],"mappings":"kWAsCeA,UAnCO,SAAAC,GACpB,OACEC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,iBACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,6BACbH,EAAAC,EAAAC,cAAA,SACEE,GAAG,SACHD,UAAU,oBACVE,KAAK,OACLC,YAAY,uBACZC,SAAUR,EAAMS,sBAGpBR,EAAAC,EAAAC,cAAA,OAAKC,UAAU,wBACbH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,qBACZH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,qBACZH,EAAAC,EAAAC,cAAA,KAAGO,KAAK,cAAcN,UAAU,uBAAhC,gBAIFH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,qBACZH,EAAAC,EAAAC,cAAA,KAAGO,KAAK,eAAeN,UAAU,uBAAjC,iBAIFH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,qBACZH,EAAAC,EAAAC,cAAA,KAAGO,KAAK,cAAcN,UAAU,uBAAhC,qBCrBGO,UAJC,WACd,OAAOV,EAAAC,EAAAC,cAAA,OAAKC,UAAU,UAAf,gBCwCMQ,UAxCI,SAAAZ,GACjB,IAAIa,EAAQ,KACRC,EAAO,KACPC,EAAQ,KACRC,EAAU,KA0Bd,OAvBIhB,EAAMiB,WACRD,EAAUf,EAAAC,EAAAC,cAACe,EAAD,OAIRlB,EAAMY,aACRC,EACEZ,EAAAC,EAAAC,cAAA,OAAKgB,OAAO,MAAMC,IAAKpB,EAAMY,WAAWS,OAAO,GAAG,KAAMC,IAAI,WAE9DR,EAAOb,EAAAC,EAAAC,cAAA,0BAAkBH,EAAMY,WAAWW,MAC1CR,EAAQd,EAAAC,EAAAC,cAAA,oBAAYH,EAAMY,WAAWY,OAAOC,KAAK,MAEjDT,EACEf,EAAAC,EAAAC,cAAAF,EAAAC,EAAAwB,SAAA,KACGb,EACDZ,EAAAC,EAAAC,cAAA,OAAKwB,MAAO,CAAEC,UAAW,WACtBd,EACAC,KAOPd,EAAAC,EAAAC,cAAA,OAAKE,GAAG,aAAaD,UAAU,cAC7BH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,qBACbH,EAAAC,EAAAC,cAAA,4BAEFF,EAAAC,EAAAC,cAAA,OAAKC,UAAU,oBAAoBY,aCW1Ba,6MA9CbC,MAAQ,CAAEC,EAAG,KAAMC,EAAG,KAAMC,MAAO,KAAMd,OAAQ,KAAMe,KAAM,0FAcxC,IAAAC,EACGC,KAAKN,MAAnBE,EADWG,EACXH,EAAGb,EADQgB,EACRhB,QAKPiB,KAAKpC,MAAMqC,QACNC,IACGF,KAAKG,KAAKC,MACjBC,KAAK,IAAKL,KAAKpC,MAAM0C,OAAON,KAAKpC,MAAMqC,QAAQ,KAE3CC,IAAUF,KAAKG,KAAKC,MAAMC,KAAK,IAAKL,KAAKpC,MAAM0C,OAAO,KAK5DD,KAAK,SAAU,GACfE,aACAC,SAAS,KACTH,KAAK,IAAKT,GACVS,KAAK,SAAUtB,oCAGX,IAAA0B,EAC+BT,KAAKN,MAAnCC,EADDc,EACCd,EAAGC,EADJa,EACIb,EAAGb,EADP0B,EACO1B,OAAQc,EADfY,EACeZ,MAAOC,EADtBW,EACsBX,KAE7B,OACEjC,EAAAC,EAAAC,cAAA,QAAM2C,IAAI,OAAOf,EAAGA,EAAGC,EAAGA,EAAGb,OAAQA,EAAQc,MAAOA,EAAOC,KAAMA,uDAvCrCa,EAAWC,GACzC,OAAKD,EAEE,CACLhB,EAAGgB,EAAUhB,EACbC,EAAGe,EAAUf,EACbC,MAAOc,EAAUd,MACjBd,OAAQ4B,EAAU5B,OAClBe,KAAMa,EAAUb,MAPK,YAJRe,aCEbC,EAAiB,GAAjBA,EAA0B,GAA1BA,EAAqC,GAArCA,EAAiD,GACjD/B,EAAS,IAAM+B,EAAaA,EAC5BjB,EAAQ,IAAMiB,EAAcA,EAsHnBC,6MAnHbrB,MAAQ,CACNsB,KAAM,GACNC,OAAQf,MAAegB,MAAM,CAAC,EAAGrB,IACjCS,OAAQJ,MAAiBgB,MAAM,CAACnC,EAAQ,IAExCoC,OAAQjB,MAELgB,MAAM,CAAC,EAAGrB,IACVuB,aAAa,IACbC,aAAa,GAChBC,YAAapB,IAAmBA,KAChCD,QAAS,QAIXsB,MAAQrB,IAAcsB,EAAK9B,MAAMuB,QAAQQ,WAAWvB,IAAc,YAClEwB,MAAQxB,IAAYsB,EAAK9B,MAAMY,6FAuCTK,EAAWgB,GAI/B,OAAO,8CAKPzB,IAAUF,KAAKG,KAAKoB,OACjBhB,aACAC,SAAS,KACToB,KAAK5B,KAAKuB,OACbrB,IAAUF,KAAKG,KAAKuB,OACjBnB,aACAC,SAAS,KACToB,KAAK5B,KAAK0B,oDAKbxB,IAAUF,KAAKG,KAAKoB,OACjBhB,aACAC,SAAS,KACToB,KAAK5B,KAAKuB,OACbrB,IAAUF,KAAKG,KAAKuB,OACjBnB,aACAC,SAAS,KACToB,KAAK5B,KAAK0B,wCAGN,IAAAG,EAAA7B,KACP,OACEnC,EAAAC,EAAAC,cAAA,OACEgB,OAAQA,EAAS+B,EAAaA,EAC9BjB,MAAOA,EAAQiB,EAAcA,GAE7BjD,EAAAC,EAAAC,cAAA,KAAG+D,UAAS,aAAAC,OAAejB,EAAf,KAAAiB,OAA8BjB,EAA9B,MACTd,KAAKN,MAAMsB,KAAKgB,IAAI,SAACC,EAAGC,GACvB,OACErE,EAAAC,EAAAC,cAACoE,EAAD,CACEC,IAAKF,EACLvC,EAAGsC,EAAEtC,EACLC,EAAGqC,EAAErC,EACLb,OAAQkD,EAAElD,OACVc,MAAOgC,EAAKnC,MAAMyB,OAAOkB,YACzBvC,KAAMmC,EAAEnC,KACRQ,OAAQuB,EAAKnC,MAAMY,WAKzBzC,EAAAC,EAAAC,cAAA,KAAG2C,IAAI,QAAQoB,UAAS,gBAAAC,OAAkBhD,EAAlB,OACxBlB,EAAAC,EAAAC,cAAA,KAAG2C,IAAI,+DAtFiBC,EAAWC,GAEzC,IAAKD,EAAW,OAAO,KAF6B,IAI5C2B,EAAS3B,EAAT2B,KAEArB,EAAwCL,EAAxCK,OAAQX,EAAgCM,EAAhCN,OAAQa,EAAwBP,EAAxBO,OAAQG,EAAgBV,EAAhBU,YAuBhC,OApBAL,EAAOsB,OAAOrC,IAAUoC,EAAM,SAAAL,GAAC,OAAIA,EAAEO,QACrClC,EAAOiC,OAAO,CAAC,EAAGrC,IAAOoC,EAAM,SAAAL,GAAC,OAAIA,EAAEQ,UAMtCtB,EAAOoB,OAAOD,EAAKN,IAAI,SAAAC,GAAC,OAAIA,EAAEO,QAC9BlB,EAAYiB,OAAO,CAACrC,IAAOoC,EAAM,SAAAL,GAAC,OAAIA,EAAEQ,QAAQ,IAYzC,CAAEzB,KATIsB,EAAKN,IAAI,SAAAC,GACpB,MAAO,CACLtC,EAAGsB,EAAOgB,EAAEO,MACZ5C,EAAGU,EAAO2B,EAAEQ,OACZ1D,OAAQA,EAASuB,EAAO2B,EAAEQ,OAC1B3C,KAAMwB,EAAYW,EAAEQ,UAITnC,iBApDIO,aCUR6B,UAhBO,SAAA9E,GACpB,IAAI+E,EAYJ,OAVI/E,EAAMgF,cACRD,EAAU/E,EAAMgF,YAAYZ,IAAI,SAAAa,GAC9B,OACEhF,EAAAC,EAAAC,cAAA,UAAQqE,IAAKS,EAAI5E,GAAI6E,QAASlF,EAAMmF,QAAQC,YAAWH,EAAI5E,KACxD4E,EAAII,aAMNpF,EAAAC,EAAAC,cAAA,OAAKC,UAAU,mBAAmB2E,sBC8D5BO,iBAtEY,SAAAtF,GAEzB,IAAI0E,EAAO,KACPM,EAAc,KACdhE,EAAU,KAwDd,OAtDIhB,EAAMiB,WACRD,EAAUf,EAAAC,EAAAC,cAACe,EAAD,OAGZqE,QAAQC,IAAIxF,EAAMyF,SAEdzF,EAAMyF,UAERf,EAAO1E,EAAM0F,aAAa1F,EAAM2F,UAEhCX,EAAchF,EAAMyF,QAAQf,KACzBkB,OAAO,SAACC,EAAKC,GAAW,IAAAC,GAAA,EAAAC,GAAA,EAAAC,OAAAC,EAAA,IACvB,QAAAC,EAAAC,EAAcpG,EAAMqG,eAAeC,MAAnCC,OAAAC,cAAAT,GAAAI,EAAAC,EAAAK,QAAAC,MAAAX,GAAA,EAA0C,KAAjCY,EAAiCR,EAAAtB,MACxC,GAAI8B,EAAEtG,KAAOyF,EAAOH,SAAU,CAC5BE,EAAIe,KAAK,CAAEvB,SAAUsB,EAAEtB,SAAUhF,GAAIsG,EAAEtG,KACvC,QAJmB,MAAAwG,GAAAb,GAAA,EAAAC,EAAAY,EAAA,YAAAd,GAAA,MAAAK,EAAAU,QAAAV,EAAAU,SAAA,WAAAd,EAAA,MAAAC,GAOvB,OAAOJ,GACN,IACFkB,KAAK,SAAC7G,EAAG8G,GACR,OAAO9G,EAAEG,GAAK2G,EAAE3G,KAGpBW,EACEf,EAAAC,EAAAC,cAAAF,EAAAC,EAAAwB,SAAA,KACEzB,EAAAC,EAAAC,cAAC8G,EAAD,CAAUvC,KAAMA,IAChBzE,EAAAC,EAAAC,cAAC+G,EAAAhH,EAAD,CACEE,UAAU,eACV+G,aAAc,CAAC,EAAG,IAClBC,IAAK,EACLC,IAAK,GACLC,YAAY,EACZ9G,SAAUR,EAAMuH,gBAElBtH,EAAAC,EAAAC,cAACqH,EAAD,CACErC,QAASnF,EAAMyH,qBACfzC,YAAaA,MAkBnB/E,EAAAC,EAAAC,cAAA,OAAKE,GAAG,cAAcD,UAAU,sBAC9BH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,6BACbH,EAAAC,EAAAC,cAAA,6BAEFF,EAAAC,EAAAC,cAAA,OAAKC,UAAU,+BAA+BY,MCpE9CG,EAAS,IADiB,GAAuB,GAEjDc,EAAQ,IAFS,GAAoB,GAKrCyF,EAAapF,MAEhBqF,MAAM,SAAUrF,IAAeL,EAAQ,EAAGd,EAAS,IACnDwG,MAAM,SAAUrF,MAAmBsF,SAAS,MAkHhCC,6MA/Gb/F,MAAQ,CACNgG,QAAS,GACTC,OAAQzF,MAAiBgB,MAAM,CAAC,GAAI,MACpC0E,OAAQ1F,IAAgBA,QAmG1B2F,UAAY,WACVrE,EAAKsE,KAAKzF,KAAK,YAAa,SAAA4B,GAAC,mBAAAF,OAAiBE,EAAEtC,EAAnB,MAAAoC,OAAyBE,EAAErC,EAA3B,2FAzEX,IAAAiC,EAAA7B,KAClBsF,EACGC,MACC,YACArF,MAAkB6F,OAAO,SAAA9D,GAAC,OAAIJ,EAAKnC,MAAMiG,OAAO1D,EAAEQ,UAEnDuD,GAAG,OAAQhG,KAAK6F,WACnB7F,KAAKiG,gBACLX,EACGY,MAAMlG,KAAKN,MAAMgG,SACjBS,MAAM,IACNC,uDAGgB,IAAAC,EAAArG,KAInBsF,EACGC,MACC,YACArF,MAAkB6F,OAAO,SAAA9D,GAAC,OAAIoE,EAAK3G,MAAMiG,OAAO1D,EAAEQ,UAEnDuD,GAAG,OAAQhG,KAAK6F,WAEnB7F,KAAKiG,gBAELX,EACGY,MAAMlG,KAAKN,MAAMgG,SACjBS,MAAM,IACNC,kDAGW,IAAAE,EAAAtG,KAIdA,KAAK8F,KAAO5F,IACFF,KAAKG,KAAKoG,cACjBC,UAAU,KACVlE,KAAKtC,KAAKN,MAAMgG,SAGnB1F,KAAK8F,KAAKW,OAAOC,SAGjB1G,KAAK2G,UAAY3G,KAAK8F,KAAKc,QAAQC,OAAO,KAC1C7G,KAAK0F,QAAU1F,KAAK2G,UAAUE,OAAO,UACrC7G,KAAK8G,MAAQ9G,KAAK2G,UAAUE,OAAO,QAGnC7G,KAAK8F,KAAO9F,KAAK2G,UAAUI,MAAM/G,KAAK8F,MACtC9F,KAAK8F,KACFkB,OAAO,UACP3G,KAAK,IAAK,SAAA4B,GAAC,OAAIqE,EAAK5G,MAAMiG,OAAO1D,EAAEQ,SACnCpC,KAAK,OAAQ,SAAA4B,GAAC,OAAIqE,EAAK5G,MAAMkG,OAAO3D,EAAE9C,QACzCa,KAAK8F,KACFkB,OAAO,QACP3G,KAAK,cAAe,UACpBA,KAAK,YAAa,SAAA4B,GAAC,OAAIqE,EAAK5G,MAAMiG,OAAO1D,EAAEQ,OAAS,IACpDpC,KAAK,OAAQ,SACb4G,KAAK,SAAAhF,GAIJ,OAAIA,EAAE9C,KAAK+H,OAAS,IAAMZ,EAAK5G,MAAMiG,OAAO1D,EAAEQ,OAAS,EAAI,GAClDR,EAAE9C,KAAKgI,UAAU,EAAG,IACtBlF,EAAE9C,KAAKgI,UAAU,EAAGb,EAAK5G,MAAMiG,OAAO1D,EAAEQ,OAAS,sCAU5D,OAAO5E,EAAAC,EAAAC,cAAA,OAAK2C,IAAI,eAAeb,MAAOA,EAAOd,OAAQA,uDArGvB4B,EAAWC,GAEzC,IAAKD,EAAW,OAAO,KAF6B,IAG5C2B,EAAS3B,EAAT2B,KACAqD,EAAmB/E,EAAnB+E,OAAQC,EAAWhF,EAAXgF,OAOVwB,EAJW9E,EAAKqC,KAAK,SAAC7G,EAAG8G,GAC7B,OAAOA,EAAEyC,QAAQC,GAAKxJ,EAAEuJ,QAAQC,KAGTC,MAAM,EAAG,IAUlC,OARA5B,EAAOpD,OAAOrC,IAAUkH,EAAO,SAAAnF,GAAC,OAAIA,EAAEoF,QAAQC,MAC9C1B,EAAOrD,OAAO6E,EAAO,SAAAnF,GAAC,OAAIA,EAAEuF,SAASC,aAO9B,CAAE/B,QAJO0B,EAAMpF,IAAI,SAAAM,GACxB,MAAO,CAAEnD,KAAMmD,EAAKkF,SAASC,WAAYhF,MAAOH,EAAK+E,QAAQC,cAzBzCzG,aCmBX6G,UA5BM,SAAA9J,GACnB,IAAI+J,EAAa,KACb/I,EAAU,KAgBd,OAdIhB,EAAMiB,WACRD,EAAUf,EAAAC,EAAAC,cAACe,EAAD,OAGRlB,EAAM8J,eACRC,EAAa/J,EAAMgK,eACnBhJ,EACEf,EAAAC,EAAAC,cAAAF,EAAAC,EAAAwB,SAAA,KACEzB,EAAAC,EAAAC,cAAC8J,EAAD,CAAavF,KAAMqF,IACnB9J,EAAAC,EAAAC,cAAA,UAAQ+E,QAASlF,EAAMkK,eAAvB,oBAMJjK,EAAAC,EAAAC,cAAA,OAAKE,GAAG,aAAaD,UAAU,gBAC7BH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,uBACbH,EAAAC,EAAAC,cAAA,4BAEFF,EAAAC,EAAAC,cAAA,OAAKC,UAAU,yBAAyBY,uBC8M/BmJ,cAhNb,SAAAA,IAAc,IAAAvG,EAAA,OAAAwG,OAAAC,EAAA,EAAAD,CAAAhI,KAAA+H,IACZvG,EAAAwG,OAAAE,EAAA,EAAAF,CAAAhI,KAAAgI,OAAAG,EAAA,EAAAH,CAAAD,GAAAnG,KAAA5B,QAhBFN,MAAQ,CACN0I,OAAQ,GACRC,SAAU,GACV7J,WAAY,KACZ6E,QAAS,KACTY,eAAgB,KAChBV,SAAU,GACV+E,cAAe,IACfZ,aAAc,KACda,UAAWC,IAAO,cAAcC,OAAO,cACvCC,QAASF,IAAO,cAAcC,OAAO,cACrCE,WAAY,GACZ9J,UAAU,GAGE2C,EAKdnD,mBAAqB,SAAAuK,GACnBpH,EAAKqH,oBAAoBD,EAAME,OAAOrG,QAN1BjB,EAQduH,mBAAqB,SAAAC,GACnBxH,EAAKyH,SAAS,CAAEb,OAAQY,KATZxH,EAoHd8B,aAAe,SAAArF,GACb,IAOMqE,EAPA4G,EAAU1H,EAAK9B,MAAM2D,QAAQf,KAAK6G,OAAO,SAAAC,GAC7C,OAAOA,EAAK7F,WAAatF,IAK3B,GAAIiL,EAAQhC,OAWV,OARE5E,EADS,KAAPrE,GAAoB,MAAPA,EACRiL,EAAQ,GAAGG,WAAWC,OAEtBJ,EAAQ,GAAGG,WAAWE,OAEbvB,OAAOwB,KAAKlH,GAAMN,IAAI,SAAAwH,GACtC,MAAO,CAAEhH,KAAM,IAAIiH,KAAKD,GAAO/G,MAAOH,EAAKkH,OAnInChI,EA2IdoG,aAAe,WAEb,GAAIpG,EAAK9B,MAAMgI,aACb,OAAOlG,EAAK9B,MAAMgI,aAAapF,KAAK6G,OAAO,SAAA7G,GACzC,OAAOA,EAAK+E,QAAQC,MA/IZ9F,EAoJd6D,qBAAuB,SAAApH,GACjBuD,EAAK9B,MAAM6D,WAAatF,GAC1BuD,EAAKyH,SAAS,CAAE1F,SAAUtF,KAtJhBuD,EA2Jd2D,cAAgB,SAAAuE,GAEdvG,QAAQC,IAAIsG,IA7JAlI,EAiKdsG,cAAgB,WACdtG,EAAKyH,SAAS,CAAEN,WAAY,MAhK5BnH,EAAKqH,oBAAsBc,IAASnI,EAAKuH,mBAAoB,KAFjDvH,mFAaZxB,KAAK4J,qBACD5J,KAAKN,MAAM0I,QACbpI,KAAK6J,8DAKUC,EAAWlJ,GAExBZ,KAAKN,MAAM0I,QACTpI,KAAKN,MAAM0I,SAAWxH,EAAUwH,QAClCpI,KAAK6J,6DAOT7J,KAAKiJ,SAAS,CAAEvB,aAAc,KAAMrE,QAAS,KAAM7E,WAAY,oDAI5C,IAAAqD,EAAA7B,KACnB+J,IACGC,IAAI,2BACJC,KAAK,SAAAC,GACJrI,EAAKoH,SAAS,CAAEhF,eAAgBiG,EAAS5H,SAE1C6H,MAAM,SAAAC,GAAK,OAAIjH,QAAQC,IAAIgH,EAAO,mEAIpB,IAAA/D,EAAArG,KAEjB+J,IACGC,IADH,4BAAAjI,OACmC/B,KAAKN,MAAM0I,OAD9C,aAEG6B,KAAK,SAAAC,GACJ,IAAKA,EAAS5H,KAAK+H,QAAQnD,OAAQ,OAAO,KAG1Cb,EAAK4C,SAAS,CAAEpK,UAAU,IAC1BwH,EAAKiE,kBAGL,IAAM9L,EAAa0L,EAAS5H,KAAK+H,QAAQ,GAWzC,OAVAhE,EAAK4C,SAAS,CAAEZ,SAAU7J,EAAWP,KAGrCoI,EAAKkE,mBAGLlE,EAAKmE,iBAIET,IAAMC,IAAN,WAAAjI,OACMvD,EAAWP,GADjB,+CAAA8D,OAEHsE,EAAK3G,MAAM6I,UAFR,aAAAxG,OAGOsE,EAAK3G,MAAMgJ,QAHlB,gCAMRuB,KAAK,SAAAC,GACAA,GACF7D,EAAK4C,SAAS,CACZ5F,QAAS6G,EAAS5H,KAClBiB,SAAU2G,EAAS5H,KAAKA,KAAK,GAAGiB,aAKrC4G,MAAM,SAAAC,GAAK,OAAIjH,QAAQC,IAAIgH,EAAO,+DAItB,IAAA9D,EAAAtG,KACf+J,IACGC,IADH,WAAAjI,OACkB/B,KAAKN,MAAM2I,SAD7B,MAEG4B,KAAK,SAAAC,GACAA,GAEF5D,EAAK2C,SAAS,CAAEzK,WAAY0L,EAAS5H,SAGxC6H,MAAM,SAAAC,GAAK,OAAIjH,QAAQC,IAAIgH,EAAO,+DAIpB,IAAAK,EAAAzK,KACjB+J,IACGC,IADH,qBAAAjI,OAC4B/B,KAAKN,MAAM2I,SADvC,6BAEG4B,KAAK,SAAAC,GACJ/G,QAAQC,IAAI,eAAgB8G,EAAS5H,MAEhC4H,EAAS5H,KAAKA,KAGjBmI,EAAKxB,SAAS,CAAEvB,aAAcwC,EAAS5H,OAFvCmI,EAAKxB,SAAS,CAAEvB,aAAc,SAKjCyC,MAAM,SAAAC,GAAK,OAAIjH,QAAQC,IAAIgH,EAAO,uDAqD9B,IAAArK,EAQHC,KAAKN,MANPlB,EAFKuB,EAELvB,WACA6E,EAHKtD,EAGLsD,QACAE,EAJKxD,EAILwD,SACAU,EALKlE,EAKLkE,eACAyD,EANK3H,EAML2H,aACA7I,EAPKkB,EAOLlB,SAGF,OACEhB,EAAAC,EAAAC,cAAAF,EAAAC,EAAAwB,SAAA,KACEzB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAAC2M,EAAD,CAAerM,mBAAoB2B,KAAK3B,qBAEvCQ,EACChB,EAAAC,EAAAC,cAAAF,EAAAC,EAAAwB,SAAA,KACEzB,EAAAC,EAAAC,cAAC4M,EAAD,CAAYnM,WAAYA,EAAYK,SAAUA,IAE9ChB,EAAAC,EAAAC,cAAC6M,EAAD,CACE/L,SAAUA,EACVwE,QAASA,EACTwH,aAAc7K,KAAKmF,cACnBE,qBAAsBrF,KAAKqF,qBAC3BpB,eAAgBA,EAChBX,aAActD,KAAKsD,aACnBC,SAAUA,IAGZ1F,EAAAC,EAAAC,cAAC+M,EAAD,CACEjM,SAAUA,EACV6I,aAAcA,EACdE,aAAc5H,KAAK4H,aACnBE,cAAe9H,KAAK8H,iBAGtB,cAzNIjH,aCFlBkJ,IAAMgB,SAASC,QAAU,gCACzBjB,IAAMgB,SAASE,OAAS,GACxBlB,IAAMgB,SAASE,OAAf,aAJkB,mCAMlBC,IAASC,OAAOtN,EAAAC,EAAAC,cAACqN,EAAD,MAASC,SAASC,eAAe","file":"static/js/main.6aabceda.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./NavigationBar.css\";\n\nconst navigationBar = props => {\n  return (\n    <nav className=\"NavigationBar\">\n      <div className=\"NavigationBar__search-bar\">\n        <input\n          id=\"search\"\n          className=\"artistSearchInput\"\n          type=\"text\"\n          placeholder=\"Search For An Artist\"\n          onChange={props.handleArtistChange}\n        />\n      </div>\n      <div className=\"NavigationBar__links\">\n        <ul className=\"NavigationBar__ul\">\n          <li className=\"NavigationBar__li\">\n            <a href=\"#artistInfo\" className=\"NavigationBar__href\">\n              Artist Info\n            </a>\n          </li>\n          <li className=\"NavigationBar__li\">\n            <a href=\"#socialMedia\" className=\"NavigationBar__href\">\n              Social Media\n            </a>\n          </li>\n          <li className=\"NavigationBar__li\">\n            <a href=\"#trackSpins\" className=\"NavigationBar__href\">\n              Track Spins\n            </a>\n          </li>\n        </ul>\n      </div>\n    </nav>\n  );\n};\n\nexport default navigationBar;\n","import React from \"react\";\nimport \"./Spinner.css\";\n\nconst spinner = () => {\n  return <div className=\"Loader\">Loading...</div>;\n};\n\nexport default spinner;\n","import React from \"react\";\nimport Spinner from \"../../components/UI/Spinner/Spinner\";\nimport \"./ArtistInfo.css\";\n\nconst artistInfo = props => {\n  let image = null;\n  let info = null;\n  let genre = null;\n  let content = null;\n\n  //if search is pending. show loading spinner.\n  if (props.isLoaded) {\n    content = <Spinner />;\n  }\n\n  //when artist info is retrived. load content instead of spinner.\n  if (props.artistInfo) {\n    image = (\n      <img height=\"100\" src={props.artistInfo.images[0][100]} alt=\"Artist\" />\n    );\n    info = <h1>Artist Name: {props.artistInfo.name}</h1>;\n    genre = <h2>Genre: {props.artistInfo.genres.join(\" \")}</h2>;\n\n    content = (\n      <>\n        {image}\n        <div style={{ textAlign: \"center\" }}>\n          {info}\n          {genre}\n        </div>\n      </>\n    );\n  }\n\n  return (\n    <div id=\"artistInfo\" className=\"ArtistInfo\">\n      <div className=\"ArtistInfo__label\">\n        <span>Artist Info</span>\n      </div>\n      <div className=\"ArtistInfo__info\">{content}</div>\n    </div>\n  );\n};\n\nexport default artistInfo;\n","import React, { Component } from \"react\";\nimport * as d3 from \"d3\";\n\nclass Rect extends Component {\n  state = { x: null, y: null, width: null, height: null, fill: null };\n\n  static getDerivedStateFromProps(nextProps, prevState) {\n    if (!nextProps) return null;\n\n    return {\n      x: nextProps.x,\n      y: nextProps.y,\n      width: nextProps.width,\n      height: nextProps.height,\n      fill: nextProps.fill\n    };\n  }\n\n  componentDidUpdate() {\n    const { y, height } = this.state;\n\n    let rect;\n\n    //if log scale use yExtent, if not use linear scale from range 0\n    if (this.props.yExtent) {\n      rect = d3\n        .select(this.refs.rect)\n        .attr(\"y\", this.props.yScale(this.props.yExtent[0]));\n    } else {\n      rect = d3.select(this.refs.rect).attr(\"y\", this.props.yScale(0));\n    }\n\n    //set up bar transition\n    rect\n      .attr(\"height\", 0)\n      .transition()\n      .duration(800)\n      .attr(\"y\", y)\n      .attr(\"height\", height);\n  }\n\n  render() {\n    const { x, y, height, width, fill } = this.state;\n\n    return (\n      <rect ref=\"rect\" x={x} y={y} height={height} width={width} fill={fill} />\n    );\n  }\n}\n\nexport default Rect;\n","import React, { Component } from \"react\";\nimport Rect from \"./Rect/Rect\";\nimport * as d3 from \"d3\";\n\n//setting up global values for svg height and width\nconst margin = { left: 60, top: 20, right: 20, bottom: 50 };\nconst height = 500 - margin.top - margin.bottom;\nconst width = 700 - margin.left - margin.right;\n\nclass BarChart extends Component {\n  state = {\n    bars: [],\n    xScale: d3.scaleTime().range([0, width]),\n    yScale: d3.scaleLinear().range([height, 0]),\n    //yScale: d3.scaleLog().range([height, 0]),\n    wScale: d3\n      .scaleBand()\n      .range([0, width])\n      .paddingInner(0.1)\n      .paddingOuter(0),\n    accentScale: d3.scaleSequential(d3.interpolateRdBu),\n    yExtent: null\n  };\n\n  //setting up axis and tick formats\n  xAxis = d3.axisBottom(this.state.xScale).tickFormat(d3.timeFormat(\"%b-%Y\"));\n  yAxis = d3.axisLeft(this.state.yScale);\n  //.ticks(4)\n  //.tickFormat(function(d) {\n  // return d;\n  //});\n\n  static getDerivedStateFromProps(nextProps, prevState) {\n    //console.log(\"getDerivedStateFromProps\", nextProps, !nextProps);\n    if (!nextProps) return null;\n\n    const { data } = nextProps;\n    //console.log(data);\n    const { xScale, yScale, wScale, accentScale } = prevState;\n\n    //recalculate scales with new data\n    xScale.domain(d3.extent(data, d => d.date));\n    yScale.domain([0, d3.max(data, d => d.value)]);\n\n    //Below is yscale for log\n    //const yExtent = d3.extent(data, d => d.value);\n    //yScale.domain(d3.extent(data, d => d.value));\n\n    wScale.domain(data.map(d => d.date));\n    accentScale.domain([d3.max(data, d => d.value), 0]);\n\n    //create rect x and y values.\n    const bars = data.map(d => {\n      return {\n        x: xScale(d.date),\n        y: yScale(d.value),\n        height: height - yScale(d.value),\n        fill: accentScale(d.value)\n      };\n    });\n\n    return { bars, yScale };\n  }\n\n  //Only update barChart if data has been changed.\n  shouldComponentUpdate(nextProps, nextState) {\n    //console.log(\"shouldComponentUpdate: this.state =\", this.state);\n    //console.log(\"shouldComponentUpdate: nextSate =\", nextState);\n    //console.log(this.state.bars !== nextState.bars);\n    return true;\n  }\n\n  //happens once. render x and y axis on loadup.\n  componentDidMount() {\n    d3.select(this.refs.xAxis)\n      .transition()\n      .duration(800)\n      .call(this.xAxis);\n    d3.select(this.refs.yAxis)\n      .transition()\n      .duration(800)\n      .call(this.yAxis);\n  }\n\n  //update axis when component updates\n  componentDidUpdate() {\n    d3.select(this.refs.xAxis)\n      .transition()\n      .duration(800)\n      .call(this.xAxis);\n    d3.select(this.refs.yAxis)\n      .transition()\n      .duration(800)\n      .call(this.yAxis);\n  }\n\n  render() {\n    return (\n      <svg\n        height={height + margin.top + margin.bottom}\n        width={width + margin.left + margin.right}\n      >\n        <g transform={`translate(${margin.left},${margin.top})`}>\n          {this.state.bars.map((d, i) => {\n            return (\n              <Rect\n                key={i}\n                x={d.x}\n                y={d.y}\n                height={d.height}\n                width={this.state.wScale.bandwidth()}\n                fill={d.fill}\n                yScale={this.state.yScale}\n                // yExtent={this.state.yExtent}\n              />\n            );\n          })}\n          <g ref=\"xAxis\" transform={`translate(0, ${height})`} />\n          <g ref=\"yAxis\" />\n        </g>\n      </svg>\n    );\n  }\n}\n\nexport default BarChart;\n","import React from \"react\";\nimport \"./MetricViewBar.css\";\n\nconst metricViewBar = props => {\n  let buttons;\n\n  if (props.metricNames) {\n    buttons = props.metricNames.map(obj => {\n      return (\n        <button key={obj.id} onClick={props.clicked.bind(this, obj.id)}>\n          {obj.fullName}\n        </button>\n      );\n    });\n  }\n\n  return <div className=\"metric-view-bar\">{buttons}</div>;\n};\n\nexport default metricViewBar;\n","import React from \"react\";\nimport Spinner from \"../../components/UI/Spinner/Spinner\";\nimport BarChart from \"../../components/BarChart/BarChart\";\nimport MetricViewBar from \"../../components/MetricViewBar/MetricViewBar\";\nimport Range from \"rc-slider/lib/Range\";\nimport \"rc-slider/assets/index.css\";\nimport \"./SocialMediaMetrics.css\";\n\nconst socialMediaMetrics = props => {\n  // let barChart = null;\n  let data = null;\n  let metricNames = null;\n  let content = null;\n\n  if (props.isLoaded) {\n    content = <Spinner />;\n  }\n\n  console.log(props.metrics);\n  //only do work if metrics is not null;\n  if (props.metrics) {\n    //Grab data if metric Id was changed\n    data = props.getChartData(props.metricId);\n    //grab list of metric names.\n    metricNames = props.metrics.data\n      .reduce((acc, metric) => {\n        for (let m of props.metricMetadata.items) {\n          if (m.id === metric.metricId) {\n            acc.push({ fullName: m.fullName, id: m.id });\n            break;\n          }\n        }\n        return acc;\n      }, [])\n      .sort((a, b) => {\n        return a.id - b.id;\n      });\n\n    content = (\n      <>\n        <BarChart data={data} />\n        <Range\n          className=\"range-slider\"\n          defaultValue={[0, 10]}\n          min={0}\n          max={10}\n          allowCross={false}\n          onChange={props.onRangeChange}\n        />\n        <MetricViewBar\n          clicked={props.handleMetricIdChange}\n          metricNames={metricNames}\n        />\n      </>\n    );\n\n    // populate barchart with data\n    // barChart = (\n    //   <div id=\"socialMedia\" className=\"SocialMediaMetrics\">\n    //     <div className=\"SocialMediaMetrics__label\">\n    //       <span>Social Media</span>\n    //     </div>\n    //     <div className=\"SocialMediaMetrics__metrics\" />\n    //   </div>\n    // );\n  }\n\n  //return barChart;\n  return (\n    <div id=\"socialMedia\" className=\"SocialMediaMetrics\">\n      <div className=\"SocialMediaMetrics__label\">\n        <span>Social Media</span>\n      </div>\n      <div className=\"SocialMediaMetrics__metrics\">{content}</div>\n    </div>\n  );\n};\n\nexport default socialMediaMetrics;\n","import React, { Component } from \"react\";\nimport * as d3 from \"d3\";\n\n//setting up global values for svg height and width\nconst margin = { left: 20, top: 20, right: 20, bottom: 20 };\nconst height = 600 - margin.top - margin.bottom;\nconst width = 700 - margin.left - margin.right;\n\n//setup the simulation for the bubbles to explode from the center on data change\nconst simulation = d3\n  .forceSimulation()\n  .force(\"center\", d3.forceCenter(width / 2, height / 2))\n  .force(\"charge\", d3.forceManyBody().strength(180));\n\nclass BubbleChart extends Component {\n  state = {\n    circles: [],\n    rScale: d3.scaleLinear().range([30, 125]),\n    cScale: d3.scaleOrdinal(d3.schemePaired)\n  };\n\n  static getDerivedStateFromProps(nextProps, prevState) {\n    //console.log(\"getDerivedStateFromProps\", nextProps,prevState);\n    if (!nextProps) return null;\n    const { data } = nextProps;\n    const { rScale, cScale } = prevState;\n\n    //filter top 10\n    let sortedData = data.sort((a, b) => {\n      return b.summary.TW - a.summary.TW;\n    });\n\n    const top15 = sortedData.slice(0, 15);\n    //Update scales with new data\n    rScale.domain(d3.extent(top15, d => d.summary.TW));\n    cScale.domain(top15, d => d.metadata.asset_name);\n\n    //create data for circles\n    const circles = top15.map(data => {\n      return { name: data.metadata.asset_name, value: data.summary.TW };\n    });\n\n    return { circles };\n  }\n\n  componentDidMount() {\n    simulation\n      .force(\n        \"collision\",\n        d3.forceCollide().radius(d => this.state.rScale(d.value))\n      )\n      .on(\"tick\", this.forceTick);\n    this.renderCircles();\n    simulation\n      .nodes(this.state.circles)\n      .alpha(0.9)\n      .restart();\n  }\n\n  componentDidUpdate() {\n    //console.log(\"bubbleChart: componentDidUpdate\");\n    //console.log(this.state.circles);\n\n    simulation\n      .force(\n        \"collision\",\n        d3.forceCollide().radius(d => this.state.rScale(d.value))\n      )\n      .on(\"tick\", this.forceTick);\n\n    this.renderCircles();\n\n    simulation\n      .nodes(this.state.circles)\n      .alpha(0.9)\n      .restart();\n  }\n\n  renderCircles() {\n    //console.log(\"renderCircles\", this.state.circles);\n\n    //JOIN\n    this.node = d3\n      .select(this.refs.svgContainer)\n      .selectAll(\"g\")\n      .data(this.state.circles);\n\n    //EXIT\n    this.node.exit().remove();\n\n    //ENTER\n    this.nodeEnter = this.node.enter().append(\"g\");\n    this.circles = this.nodeEnter.append(\"circle\");\n    this.label = this.nodeEnter.append(\"text\");\n\n    //ENTER + UPDATE\n    this.node = this.nodeEnter.merge(this.node);\n    this.node\n      .select(\"circle\")\n      .attr(\"r\", d => this.state.rScale(d.value))\n      .attr(\"fill\", d => this.state.cScale(d.name));\n    this.node\n      .select(\"text\")\n      .attr(\"text-anchor\", \"middle\")\n      .attr(\"font-size\", d => this.state.rScale(d.value) / 4)\n      .attr(\"fill\", \"black\")\n      .text(d => {\n        //this is some cutting edge stuff..\n        //i didn't want to spend too much time messing with text size to fit bubbles.\n        //will refactor this when i have more time.\n        if (d.name.length > 17 && this.state.rScale(d.value) / 3 > 17)\n          return d.name.substring(0, 17);\n        return d.name.substring(0, this.state.rScale(d.value) / 3);\n      });\n  }\n\n  //update positioning of group every tick.\n  forceTick = () => {\n    this.node.attr(\"transform\", d => `translate(${d.x}, ${d.y})`);\n  };\n\n  render() {\n    return <svg ref=\"svgContainer\" width={width} height={height} />;\n  }\n}\n\nexport default BubbleChart;\n","import React from \"react\";\nimport BubbleChart from \"../../components/BubbleChart/BubbleChart\";\nimport Spinner from \"../../components/UI/Spinner/Spinner\";\nimport \"./TrackMetrics.css\";\n\nconst trackMetrics = props => {\n  let circleData = null;\n  let content = null;\n\n  if (props.isLoaded) {\n    content = <Spinner />;\n  }\n\n  if (props.trackMetrics) {\n    circleData = props.getTrackData();\n    content = (\n      <>\n        <BubbleChart data={circleData} />\n        <button onClick={props.handleBubbles}>Change Bubbles</button>\n      </>\n    );\n  }\n\n  return (\n    <div id=\"trackSpins\" className=\"TrackMetrics\">\n      <div className=\"TrackMetrics__label\">\n        <span>Track Spins</span>\n      </div>\n      <div className=\"TrackMetrics__metrics\">{content}</div>\n    </div>\n  );\n};\n\nexport default trackMetrics;\n","import React, { Component } from \"react\";\nimport \"./App.css\";\nimport axios from \"axios\";\nimport debounce from \"lodash/debounce\";\nimport NavigationBar from \"./components/NavigationBar/NavigationBar\";\nimport ArtistInfo from \"./containers/ArtistInfo/ArtistInfo\";\nimport SocialMediaMetrics from \"./containers/SocialMediaMetrics/SocialMediaMetrics\";\nimport TrackMetrics from \"./containers/TrackMetrics/TrackMetrics\";\nimport moment from \"moment\";\n\nclass App extends Component {\n  state = {\n    artist: \"\",\n    artistId: \"\",\n    artistInfo: null,\n    metrics: null,\n    metricMetadata: null,\n    metricId: 41,\n    trackMetricId: 411,\n    trackMetrics: null,\n    startDate: moment(\"2018-01-01\").format(\"YYYY-MM-DD\"),\n    endDate: moment(\"2018-12-31\").format(\"YYYY-MM-DD\"),\n    bubbleData: [],\n    isLoaded: false\n  };\n\n  constructor() {\n    super();\n    this.emitDebouncedSearch = debounce(this.handleArtistSearch, 500);\n  }\n  //Search Artis Event Handlers\n  handleArtistChange = event => {\n    this.emitDebouncedSearch(event.target.value);\n  };\n  handleArtistSearch = val => {\n    this.setState({ artist: val });\n  };\n\n  componentDidMount() {\n    this.grabMetricMetadata();\n    if (this.state.artist) {\n      this.grabArtistMetric();\n      //this.grabArtistInfo();\n    }\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    //Only update artist data if new entry is not blank or different from prev entry\n    if (this.state.artist) {\n      if (this.state.artist !== prevState.artist) {\n        this.grabArtistMetric();\n        //this.grabArtistInfo();\n      }\n    }\n  }\n\n  resetArtistInfo() {\n    this.setState({ trackMetrics: null, metrics: null, artistInfo: null });\n  }\n\n  //Grabs the metric meta data.\n  grabMetricMetadata() {\n    axios\n      .get(\"metrics/?fields=items.*\")\n      .then(response => {\n        this.setState({ metricMetadata: response.data });\n      })\n      .catch(error => console.log(error, \"grabMetricMetadata\"));\n  }\n\n  //method to grab artist metrics.\n  grabArtistMetric() {\n    //API searches for one artist.\n    axios\n      .get(`search/v1/artists/?query=${this.state.artist}&limit=1`)\n      .then(response => {\n        if (!response.data.artists.length) return null;\n\n        //When searching for new artist. Set is loaded to true. Add spinner bars for each section.\n        this.setState({ isLoaded: true });\n        this.resetArtistInfo();\n\n        //Set state for artist info.\n        const artistInfo = response.data.artists[0];\n        this.setState({ artistId: artistInfo.id });\n\n        //grab Track metrics\n        this.grabTrackMetrics();\n\n        //grab artist info\n        this.grabArtistInfo();\n\n        //Grabs Social Media Metrics\n        //id: 28, 41, 11, 151, 247\n        return axios.get(\n          `artists/${artistInfo.id}/data?metricIds=28,41,11,151,247&startDate=${\n            this.state.startDate\n          }&endDate=${this.state.endDate}&timeseries=totals,deltas`\n        );\n      })\n      .then(response => {\n        if (response) {\n          this.setState({\n            metrics: response.data,\n            metricId: response.data.data[0].metricId\n          });\n          //console.log(\"metrics\", response.data);\n        }\n      })\n      .catch(error => console.log(error, \"grabArtistMetric\"));\n  }\n\n  //Grabs Artist Info\n  grabArtistInfo() {\n    axios\n      .get(`artists/${this.state.artistId}/`)\n      .then(response => {\n        if (response) {\n          //console.log(\"artistinfo\", response.data);\n          this.setState({ artistInfo: response.data });\n        }\n      })\n      .catch(error => console.log(error, \"grabArtistInfo\"));\n  }\n\n  //Grab Artist Track Metrics\n  grabTrackMetrics() {\n    axios\n      .get(`metrics/v1/entity/${this.state.artistId}/nestedAssets?metric=410`)\n      .then(response => {\n        console.log(\"track metric\", response.data);\n        //if theres no track metrics. API returns empty array. set trackMetrics state null\n        if (!response.data.data) {\n          this.setState({ trackMetrics: null });\n        } else {\n          this.setState({ trackMetrics: response.data });\n        }\n      })\n      .catch(error => console.log(error, \"grabTrackMetrics\"));\n  }\n\n  //Filters through an array of metric arrays and returns matching metric ID to pass to barChart component.\n  getChartData = id => {\n    const dataArr = this.state.metrics.data.filter(item => {\n      return item.metricId === id;\n    });\n\n    //if data exists for metric id. grab deltas or totals\n    //refactor this code to create data with both deltas and totals. -AWOO\n    if (dataArr.length) {\n      let data;\n      if (id === 41 || id === 247) {\n        data = dataArr[0].timeseries.deltas;\n      } else {\n        data = dataArr[0].timeseries.totals;\n      }\n      const chartData = Object.keys(data).map(keys => {\n        return { date: new Date(keys), value: data[keys] };\n      });\n\n      return chartData;\n    }\n  };\n\n  //get clean track data.\n  getTrackData = () => {\n    //redo this.\n    if (this.state.trackMetrics) {\n      return this.state.trackMetrics.data.filter(data => {\n        return data.summary.TW;\n      });\n    }\n  };\n\n  handleMetricIdChange = id => {\n    if (this.state.metricId !== id) {\n      this.setState({ metricId: id });\n    }\n  };\n\n  //TODO - AWOO - use this method to update date range with range slider.\n  onRangeChange = e => {\n    //manage dates with moment js. convert to number format. set state for endDate-startDate\n    console.log(e);\n  };\n\n  //TODO - Bubble Handler\n  handleBubbles = () => {\n    this.setState({ bubbleData: [] });\n  };\n\n  render() {\n    let {\n      artistInfo,\n      metrics,\n      metricId,\n      metricMetadata,\n      trackMetrics,\n      isLoaded\n    } = this.state;\n\n    return (\n      <>\n        <div className=\"App\">\n          <NavigationBar handleArtistChange={this.handleArtistChange} />\n\n          {isLoaded ? (\n            <>\n              <ArtistInfo artistInfo={artistInfo} isLoaded={isLoaded} />\n\n              <SocialMediaMetrics\n                isLoaded={isLoaded}\n                metrics={metrics}\n                onRangeChang={this.onRangeChange}\n                handleMetricIdChange={this.handleMetricIdChange}\n                metricMetadata={metricMetadata}\n                getChartData={this.getChartData}\n                metricId={metricId}\n              />\n\n              <TrackMetrics\n                isLoaded={isLoaded}\n                trackMetrics={trackMetrics}\n                getTrackData={this.getTrackData}\n                handleBubbles={this.handleBubbles}\n              />\n            </>\n          ) : null}\n        </div>\n      </>\n    );\n  }\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport axios from \"axios\";\n\nconst publicKey = \"eb74a82009cbc53c9b44866743633f9d\";\n\naxios.defaults.baseURL = \"https://api.nextbigsound.com/\";\naxios.defaults.params = {};\naxios.defaults.params[\"access_token\"] = publicKey;\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n"],"sourceRoot":""}