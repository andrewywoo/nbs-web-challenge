{"version":3,"sources":["components/NavigationBar/NavigationBar.js","containers/ArtistInfo/ArtistInfo.js","components/BarChart/Rect/Rect.js","components/BarChart/BarChart.js","components/MetricViewBar/MetricViewBar.js","containers/SocialMediaMetrics/SocialMediaMetrics.js","components/BubbleChart/BubbleChart.js","containers/TrackMetrics/TrackMetrics.js","App.js","index.js"],"names":["navigationBar","props","react_default","a","createElement","className","id","type","placeholder","onChange","handleArtistChange","href","artistInfo","image","info","genre","height","src","images","alt","name","genres","join","style","textAlign","Rect","state","x","y","width","fill","_this$state","this","yExtent","d3","refs","rect","attr","yScale","transition","duration","_this$state2","ref","nextProps","prevState","Component","margin","BarChart","bars","xScale","range","wScale","paddingInner","paddingOuter","accentScale","xAxis","_this","tickFormat","yAxis","nextState","call","_this2","transform","concat","map","d","i","BarChart_Rect_Rect","key","bandwidth","data","domain","date","value","metricViewBar","buttons","metricNames","obj","onClick","clicked","bind","fullName","socialMediaMetrics","barChart","console","log","metrics","getChartData","metricId","reduce","acc","metric","_iteratorNormalCompletion","_didIteratorError","_iteratorError","undefined","_step","_iterator","metricMetadata","items","Symbol","iterator","next","done","m","push","err","return","sort","b","components_BarChart_BarChart","Range_default","defaultValue","min","max","allowCross","onRangeChange","MetricViewBar_MetricViewBar","handleMetricIdChange","simulation","force","strength","BubbleChart","circles","rScale","cScale","forceTick","node","radius","on","renderCircles","nodes","alpha","restart","_this3","_this4","svgContainer","selectAll","exit","remove","nodeEnter","enter","append","label","merge","select","text","length","substring","top15","summary","TW","slice","metadata","asset_name","trackMetrics","circleData","bubbleChart","getTrackData","components_BubbleChart_BubbleChart","handleBubbles","App","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","artist","artistId","trackMetricId","startDate","moment","format","endDate","bubbleData","isLoaded","event","emitDebouncedSearch","target","handleArtistSearch","val","setState","dataArr","filter","item","timeseries","deltas","totals","keys","Date","e","debounce","grabMetricMetadata","grabArtistMetric","prevProps","axios","get","then","response","catch","error","artists","grabTrackMetrics","grabArtistInfo","_this5","Fragment","NavigationBar_NavigationBar","ArtistInfo_ArtistInfo","SocialMediaMetrics_SocialMediaMetrics","onRangeChang","TrackMetrics_TrackMetrics","defaults","baseURL","params","ReactDOM","render","src_App_0","document","getElementById"],"mappings":"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","file":"static/js/main.d99e580d.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./NavigationBar.css\";\n\nconst navigationBar = props => {\n  return (\n    <nav className=\"NavigationBar\">\n      <div className=\"NavigationBar__search-bar\">\n        <input\n          id=\"search\"\n          className=\"artistSearchInput\"\n          type=\"text\"\n          placeholder=\"Search For An Artist\"\n          onChange={props.handleArtistChange}\n        />\n      </div>\n      <div className=\"NavigationBar__links\">\n        <ul className=\"NavigationBar__ul\">\n          <li className=\"NavigationBar__li\">\n            <a href=\"#artistInfo\" className=\"NavigationBar__href\">\n              Artist Info\n            </a>\n          </li>\n          <li className=\"NavigationBar__li\">\n            <a href=\"#socialMedia\" className=\"NavigationBar__href\">\n              Social Media\n            </a>\n          </li>\n          <li className=\"NavigationBar__li\">\n            <a href=\"#trackSpins\" className=\"NavigationBar__href\">\n              Track Spins\n            </a>\n          </li>\n        </ul>\n      </div>\n    </nav>\n  );\n};\n\nexport default navigationBar;\n","import React from \"react\";\nimport \"./ArtistInfo.css\";\n\nconst artistInfo = props => {\n  let image = null;\n  let info = null;\n  let genre = null;\n\n  if (props.artistInfo) {\n    image = (\n      <img height=\"100\" src={props.artistInfo.images[0][100]} alt=\"Artist\" />\n    );\n    info = <h1>Artist Name: {props.artistInfo.name}</h1>;\n    genre = <h2>Genre: {props.artistInfo.genres.join(\" \")}</h2>;\n  }\n\n  return (\n    <div id=\"artistInfo\" className=\"ArtistInfo\">\n      <div className=\"ArtistInfo__label\">\n        <span>Artist Info</span>\n      </div>\n      <div className=\"ArtistInfo__info\">\n        {image}\n        <div style={{ textAlign: \"center\" }}>\n          {info}\n          {genre}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default artistInfo;\n","import React, { Component } from \"react\";\nimport * as d3 from \"d3\";\n\nclass Rect extends Component {\n  state = { x: null, y: null, width: null, height: null, fill: null };\n\n  static getDerivedStateFromProps(nextProps, prevState) {\n    if (!nextProps) return null;\n\n    return {\n      x: nextProps.x,\n      y: nextProps.y,\n      width: nextProps.width,\n      height: nextProps.height,\n      fill: nextProps.fill\n    };\n  }\n\n  componentDidUpdate() {\n    const { y, height } = this.state;\n\n    let rect;\n\n    //if log scale use yExtent, if not use linear scale from range 0\n    if (this.props.yExtent) {\n      rect = d3\n        .select(this.refs.rect)\n        .attr(\"y\", this.props.yScale(this.props.yExtent[0]));\n    } else {\n      rect = d3.select(this.refs.rect).attr(\"y\", this.props.yScale(0));\n    }\n\n    //set up bar transition\n    rect\n      .attr(\"height\", 0)\n      .transition()\n      .duration(800)\n      .attr(\"y\", y)\n      .attr(\"height\", height);\n  }\n\n  render() {\n    const { x, y, height, width, fill } = this.state;\n\n    return (\n      <rect ref=\"rect\" x={x} y={y} height={height} width={width} fill={fill} />\n    );\n  }\n}\n\nexport default Rect;\n","import React, { Component } from \"react\";\nimport Rect from \"./Rect/Rect\";\nimport * as d3 from \"d3\";\n\n//setting up global values for svg height and width\nconst margin = { left: 60, top: 20, right: 20, bottom: 50 };\nconst height = 500 - margin.top - margin.bottom;\nconst width = 700 - margin.left - margin.right;\n\nclass BarChart extends Component {\n  state = {\n    bars: [],\n    xScale: d3.scaleTime().range([0, width]),\n    yScale: d3.scaleLinear().range([height, 0]),\n    //yScale: d3.scaleLog().range([height, 0]),\n    wScale: d3\n      .scaleBand()\n      .range([0, width])\n      .paddingInner(0.1)\n      .paddingOuter(0),\n    accentScale: d3.scaleSequential(d3.interpolateRdBu),\n    yExtent: null\n  };\n\n  //setting up axis and tick formats\n  xAxis = d3.axisBottom(this.state.xScale).tickFormat(d3.timeFormat(\"%b-%Y\"));\n  yAxis = d3.axisLeft(this.state.yScale);\n  //.ticks(4)\n  //.tickFormat(function(d) {\n  // return d;\n  //});\n\n  static getDerivedStateFromProps(nextProps, prevState) {\n    //console.log(\"getDerivedStateFromProps\", nextProps, !nextProps);\n    if (!nextProps) return null;\n\n    const { data } = nextProps;\n    //console.log(data);\n    const { xScale, yScale, wScale, accentScale } = prevState;\n\n    //recalculate scales with new data\n    xScale.domain(d3.extent(data, d => d.date));\n    yScale.domain([0, d3.max(data, d => d.value)]);\n\n    //Below is yscale for log\n    //const yExtent = d3.extent(data, d => d.value);\n    //yScale.domain(d3.extent(data, d => d.value));\n\n    wScale.domain(data.map(d => d.date));\n    accentScale.domain([d3.max(data, d => d.value), 0]);\n\n    //create rect x and y values.\n    const bars = data.map(d => {\n      return {\n        x: xScale(d.date),\n        y: yScale(d.value),\n        height: height - yScale(d.value),\n        fill: accentScale(d.value)\n      };\n    });\n\n    return { bars, yScale };\n  }\n\n  //Only update barChart if data has been changed.\n  shouldComponentUpdate(nextProps, nextState) {\n    //console.log(\"shouldComponentUpdate: this.state =\", this.state);\n    //console.log(\"shouldComponentUpdate: nextSate =\", nextState);\n    //console.log(this.state.bars !== nextState.bars);\n    return true;\n  }\n\n  //happens once. render x and y axis on loadup.\n  componentDidMount() {\n    d3.select(this.refs.xAxis)\n      .transition()\n      .duration(800)\n      .call(this.xAxis);\n    d3.select(this.refs.yAxis)\n      .transition()\n      .duration(800)\n      .call(this.yAxis);\n  }\n\n  //update axis when component updates\n  componentDidUpdate() {\n    d3.select(this.refs.xAxis)\n      .transition()\n      .duration(800)\n      .call(this.xAxis);\n    d3.select(this.refs.yAxis)\n      .transition()\n      .duration(800)\n      .call(this.yAxis);\n  }\n\n  render() {\n    return (\n      <svg\n        height={height + margin.top + margin.bottom}\n        width={width + margin.left + margin.right}\n      >\n        <g transform={`translate(${margin.left},${margin.top})`}>\n          {this.state.bars.map((d, i) => {\n            return (\n              <Rect\n                key={i}\n                x={d.x}\n                y={d.y}\n                height={d.height}\n                width={this.state.wScale.bandwidth()}\n                fill={d.fill}\n                yScale={this.state.yScale}\n                // yExtent={this.state.yExtent}\n              />\n            );\n          })}\n          <g ref=\"xAxis\" transform={`translate(0, ${height})`} />\n          <g ref=\"yAxis\" />\n        </g>\n      </svg>\n    );\n  }\n}\n\nexport default BarChart;\n","import React from \"react\";\nimport \"./MetricViewBar.css\";\n\nconst metricViewBar = props => {\n  let buttons;\n\n  if (props.metricNames) {\n    buttons = props.metricNames.map(obj => {\n      return (\n        <button key={obj.id} onClick={props.clicked.bind(this, obj.id)}>\n          {obj.fullName}\n        </button>\n      );\n    });\n  }\n\n  return <div className=\"metric-view-bar\">{buttons}</div>;\n};\n\nexport default metricViewBar;\n","import React from \"react\";\nimport BarChart from \"../../components/BarChart/BarChart\";\nimport MetricViewBar from \"../../components/MetricViewBar/MetricViewBar\";\nimport Range from \"rc-slider/lib/Range\";\nimport \"rc-slider/assets/index.css\";\nimport \"./SocialMediaMetrics.css\";\n\nconst socialMediaMetrics = props => {\n  let barChart = null;\n  let data,\n    metricNames = null;\n\n  console.log(props.metrics);\n  //only do work if metrics is not null;\n  if (props.metrics) {\n    //Grab data if metric Id was changed\n    data = props.getChartData(props.metricId);\n    //grab list of metric names.\n    metricNames = props.metrics.data\n      .reduce((acc, metric) => {\n        for (let m of props.metricMetadata.items) {\n          if (m.id === metric.metricId) {\n            acc.push({ fullName: m.fullName, id: m.id });\n            break;\n          }\n        }\n        return acc;\n      }, [])\n      .sort((a, b) => {\n        return a.id - b.id;\n      });\n\n    // populate barchart with data\n    barChart = (\n      <div id=\"socialMedia\" className=\"SocialMediaMetrics\">\n        <div className=\"SocialMediaMetrics__label\">\n          <span>Social Media</span>\n        </div>\n        <div className=\"SocialMediaMetrics__metrics\">\n          <BarChart data={data} />\n          <Range\n            className=\"range-slider\"\n            defaultValue={[0, 10]}\n            min={0}\n            max={10}\n            allowCross={false}\n            onChange={props.onRangeChange}\n          />\n          <MetricViewBar\n            clicked={props.handleMetricIdChange}\n            metricNames={metricNames}\n          />\n        </div>\n      </div>\n    );\n  }\n\n  return barChart;\n};\n\nexport default socialMediaMetrics;\n","import React, { Component } from \"react\";\nimport * as d3 from \"d3\";\n\n//setting up global values for svg height and width\nconst margin = { left: 20, top: 20, right: 20, bottom: 20 };\nconst height = 600 - margin.top - margin.bottom;\nconst width = 700 - margin.left - margin.right;\n\n//setup the simulation for the bubbles to explode from the center on data change\nconst simulation = d3\n  .forceSimulation()\n  .force(\"center\", d3.forceCenter(width / 2, height / 2))\n  .force(\"charge\", d3.forceManyBody().strength(180));\n\nclass BubbleChart extends Component {\n  state = {\n    circles: [],\n    rScale: d3.scaleLinear().range([30, 125]),\n    cScale: d3.scaleOrdinal(d3.schemePaired)\n  };\n\n  static getDerivedStateFromProps(nextProps, prevState) {\n    //console.log(\"getDerivedStateFromProps\", nextProps,prevState);\n    if (!nextProps) return null;\n    const { data } = nextProps;\n    const { rScale, cScale } = prevState;\n\n    //filter top 10\n    let sortedData = data.sort((a, b) => {\n      return b.summary.TW - a.summary.TW;\n    });\n\n    const top15 = sortedData.slice(0, 15);\n    //Update scales with new data\n    rScale.domain(d3.extent(top15, d => d.summary.TW));\n    cScale.domain(top15, d => d.metadata.asset_name);\n\n    //create data for circles\n    const circles = top15.map(data => {\n      return { name: data.metadata.asset_name, value: data.summary.TW };\n    });\n\n    return { circles };\n  }\n\n  componentDidMount() {\n    simulation\n      .force(\n        \"collision\",\n        d3.forceCollide().radius(d => this.state.rScale(d.value))\n      )\n      .on(\"tick\", this.forceTick);\n    this.renderCircles();\n    simulation\n      .nodes(this.state.circles)\n      .alpha(0.9)\n      .restart();\n  }\n\n  componentDidUpdate() {\n    //console.log(\"bubbleChart: componentDidUpdate\");\n    //console.log(this.state.circles);\n\n    simulation\n      .force(\n        \"collision\",\n        d3.forceCollide().radius(d => this.state.rScale(d.value))\n      )\n      .on(\"tick\", this.forceTick);\n\n    this.renderCircles();\n\n    simulation\n      .nodes(this.state.circles)\n      .alpha(0.9)\n      .restart();\n  }\n\n  renderCircles() {\n    //console.log(\"renderCircles\", this.state.circles);\n\n    //JOIN\n    this.node = d3\n      .select(this.refs.svgContainer)\n      .selectAll(\"g\")\n      .data(this.state.circles);\n\n    //EXIT\n    this.node.exit().remove();\n\n    //ENTER\n    this.nodeEnter = this.node.enter().append(\"g\");\n    this.circles = this.nodeEnter.append(\"circle\");\n    this.label = this.nodeEnter.append(\"text\");\n\n    //ENTER + UPDATE\n    this.node = this.nodeEnter.merge(this.node);\n    this.node\n      .select(\"circle\")\n      .attr(\"r\", d => this.state.rScale(d.value))\n      .attr(\"fill\", d => this.state.cScale(d.name));\n    this.node\n      .select(\"text\")\n      .attr(\"text-anchor\", \"middle\")\n      .attr(\"font-size\", d => this.state.rScale(d.value) / 4)\n      .attr(\"fill\", \"black\")\n      .text(d => {\n        //this is some cutting edge stuff..\n        //i didn't want to spend too much time messing with text size to fit bubbles.\n        //will refactor this when i have more time.\n        if (d.name.length > 17 && this.state.rScale(d.value) / 3 > 17)\n          return d.name.substring(0, 17);\n        return d.name.substring(0, this.state.rScale(d.value) / 3);\n      });\n  }\n\n  //update positioning of group every tick.\n  forceTick = () => {\n    this.node.attr(\"transform\", d => `translate(${d.x}, ${d.y})`);\n  };\n\n  render() {\n    return <svg ref=\"svgContainer\" width={width} height={height} />;\n  }\n}\n\nexport default BubbleChart;\n","import React from \"react\";\nimport BubbleChart from \"../../components/BubbleChart/BubbleChart\";\nimport \"./TrackMetrics.css\";\n\nconst trackMetrics = props => {\n  let circleData = null;\n  let bubbleChart = null;\n\n  if (props.trackMetrics) {\n    circleData = props.getTrackData();\n\n    bubbleChart = (\n      <div id=\"trackSpins\" className=\"TrackMetrics\">\n        <div className=\"TrackMetrics__label\">\n          <span>Track Spins</span>\n        </div>\n        <div className=\"TrackMetrics__metrics\">\n          <BubbleChart data={circleData} />\n          <button onClick={props.handleBubbles}>Change Bubbles</button>\n        </div>\n      </div>\n    );\n  }\n\n  return bubbleChart;\n};\n\nexport default trackMetrics;\n","import React, { Component } from \"react\";\nimport \"./App.css\";\nimport axios from \"axios\";\nimport debounce from \"lodash/debounce\";\nimport NavigationBar from \"./components/NavigationBar/NavigationBar\";\nimport ArtistInfo from \"./containers/ArtistInfo/ArtistInfo\";\nimport SocialMediaMetrics from \"./containers/SocialMediaMetrics/SocialMediaMetrics\";\nimport TrackMetrics from \"./containers/TrackMetrics/TrackMetrics\";\nimport moment from \"moment\";\n\nclass App extends Component {\n  state = {\n    artist: \"\",\n    artistId: \"\",\n    artistInfo: null,\n    metrics: null,\n    metricMetadata: null,\n    metricId: 41,\n    trackMetricId: 411,\n    trackMetrics: null,\n    startDate: moment(\"2018-01-01\").format(\"YYYY-MM-DD\"),\n    endDate: moment(\"2018-12-31\").format(\"YYYY-MM-DD\"),\n    bubbleData: [],\n    isLoaded: false\n  };\n\n  constructor() {\n    super();\n    this.emitDebouncedSearch = debounce(this.handleArtistSearch, 500);\n  }\n  //Search Artis Event Handlers\n  handleArtistChange = event => {\n    this.emitDebouncedSearch(event.target.value);\n  };\n  handleArtistSearch = val => {\n    this.setState({ artist: val });\n  };\n\n  componentDidMount() {\n    this.grabMetricMetadata();\n    if (this.state.artist) {\n      this.grabArtistMetric();\n      //this.grabArtistInfo();\n    }\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    //Only update artist data if new entry is not blank or different from prev entry\n    if (this.state.artist) {\n      if (this.state.artist !== prevState.artist) {\n        this.grabArtistMetric();\n        //this.grabArtistInfo();\n      }\n    }\n  }\n\n  //Grabs the metric meta data.\n  grabMetricMetadata() {\n    axios\n      .get(\"metrics/?fields=items.*\")\n      .then(response => {\n        this.setState({ metricMetadata: response.data });\n      })\n      .catch(error => console.log(error, \"grabMetricMetadata\"));\n  }\n\n  //method to grab artist metrics.\n  grabArtistMetric() {\n    //API searches for one artist.\n    axios\n      .get(`search/v1/artists/?query=${this.state.artist}&limit=1`)\n      .then(response => {\n        if (!response.data.artists.length) return null;\n\n        //When searching for new artist. Set is loaded to true. Add spinner bars for each section.\n        this.setState({ isLoaded: true });\n\n        //Set state for artist info.\n        const artistInfo = response.data.artists[0];\n        this.setState({ artistId: artistInfo.id });\n\n        //grab Track metrics\n        this.grabTrackMetrics();\n\n        //grab artist info\n        this.grabArtistInfo();\n\n        //Grabs Social Media Metrics\n        //id: 28, 41, 11, 151, 247\n        return axios.get(\n          `artists/${artistInfo.id}/data?metricIds=28,41,11,151,247&startDate=${\n            this.state.startDate\n          }&endDate=${this.state.endDate}&timeseries=totals,deltas`\n        );\n      })\n      .then(response => {\n        if (response) {\n          this.setState({\n            metrics: response.data,\n            metricId: response.data.data[0].metricId\n          });\n          //console.log(\"metrics\", response.data);\n        }\n      })\n      .catch(error => console.log(error, \"grabArtistMetric\"));\n  }\n\n  //Grabs Artist Info\n  grabArtistInfo() {\n    axios\n      .get(`artists/${this.state.artistId}/`)\n      .then(response => {\n        if (response) {\n          //console.log(\"artistinfo\", response.data);\n          this.setState({ artistInfo: response.data });\n        }\n      })\n      .catch(error => console.log(error, \"grabArtistInfo\"));\n  }\n\n  //Grab Artist Track Metrics\n  grabTrackMetrics() {\n    axios\n      .get(`metrics/v1/entity/${this.state.artistId}/nestedAssets?metric=410`)\n      .then(response => {\n        console.log(\"track metric\", response.data);\n        //if theres no track metrics. API returns empty array. set trackMetrics state null\n        if (!response.data.data) {\n          this.setState({ trackMetrics: null });\n        } else {\n          this.setState({ trackMetrics: response.data });\n        }\n      })\n      .catch(error => console.log(error, \"grabTrackMetrics\"));\n  }\n\n  //Filters through an array of metric arrays and returns matching metric ID to pass to barChart component.\n  getChartData = id => {\n    const dataArr = this.state.metrics.data.filter(item => {\n      return item.metricId === id;\n    });\n\n    //if data exists for metric id. grab deltas or totals\n    //refactor this code to create data with both deltas and totals. -AWOO\n    if (dataArr.length) {\n      let data;\n      if (id === 41 || id === 247) {\n        data = dataArr[0].timeseries.deltas;\n      } else {\n        data = dataArr[0].timeseries.totals;\n      }\n      const chartData = Object.keys(data).map(keys => {\n        return { date: new Date(keys), value: data[keys] };\n      });\n\n      return chartData;\n    }\n  };\n\n  //get clean track data.\n  getTrackData = () => {\n    //redo this.\n    if (this.state.trackMetrics) {\n      return this.state.trackMetrics.data.filter(data => {\n        return data.summary.TW;\n      });\n    }\n  };\n\n  handleMetricIdChange = id => {\n    if (this.state.metricId !== id) {\n      this.setState({ metricId: id });\n    }\n  };\n\n  //TODO - AWOO - use this method to update date range with range slider.\n  onRangeChange = e => {\n    console.log(e);\n  };\n\n  //TODO - Bubble Handler\n  handleBubbles = () => {\n    this.setState({ bubbleData: [] });\n  };\n\n  render() {\n    let {\n      artistInfo,\n      metrics,\n      metricId,\n      metricMetadata,\n      trackMetrics\n    } = this.state;\n\n    return (\n      <>\n        <div className=\"App\">\n          <NavigationBar handleArtistChange={this.handleArtistChange} />\n\n          {this.state.isLoaded ? (\n            <>\n              <ArtistInfo artistInfo={artistInfo} />\n\n              <SocialMediaMetrics\n                metrics={metrics}\n                onRangeChang={this.onRangeChange}\n                handleMetricIdChange={this.handleMetricIdChange}\n                metricMetadata={metricMetadata}\n                getChartData={this.getChartData}\n                metricId={metricId}\n              />\n\n              <TrackMetrics\n                trackMetrics={trackMetrics}\n                getTrackData={this.getTrackData}\n                handleBubbles={this.handleBubbles}\n              />\n            </>\n          ) : null}\n        </div>\n      </>\n    );\n  }\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport axios from \"axios\";\n\nconst publicKey = \"eb74a82009cbc53c9b44866743633f9d\";\n\naxios.defaults.baseURL = \"https://api.nextbigsound.com/\";\naxios.defaults.params = {};\naxios.defaults.params[\"access_token\"] = publicKey;\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n"],"sourceRoot":""}