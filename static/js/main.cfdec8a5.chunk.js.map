{"version":3,"sources":["components/BarChart/BarChart.js","components/MetricViewBar/MetricViewBar.js","components/SearchOptions/SearchOptions.js","App.js","index.js"],"names":["margin","height","width","BarChart","state","bars","xScale","d3","range","yScale","wScale","paddingInner","paddingOuter","xAxis","_this","tickFormat","yAxis","this","refs","transition","duration","call","_this2","react_default","a","createElement","transform","concat","map","d","i","key","x","y","bandwidth","ref","nextProps","prevState","data","domain","date","value","Component","metricViewBar","props","buttons","metricNames","obj","id","onClick","clicked","bind","fullName","className","searchOptions","htmlFor","type","placeholder","onChange","handleArtistChange","DayPickerInput_default","onDayChange","handleStartDateChange","formatDate","format","parseDate","startDate","handleEndDateChange","endDate","App","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","artist","artistInfo","metrics","info","metricId","moment","event","emitDebouncedSearch","target","handleArtistSearch","val","setState","getChartData","dataArr","filter","item","length","timeseries","deltas","keys","Date","handleMetricIdChange","debounce","grabMetricInfo","grabArtistData","prevProps","axios","get","then","response","catch","error","console","log","_this3","artists","self","url","image","genre","barChart","_this4","src","images","alt","name","genres","join","components_BarChart_BarChart","reduce","acc","metric","_iteratorNormalCompletion","_didIteratorError","_iteratorError","undefined","_step","_iterator","items","Symbol","iterator","next","done","m","push","err","return","sort","b","Fragment","SearchOptions_SearchOptions","style","textAlign","MetricViewBar_MetricViewBar","defaults","baseURL","params","ReactDOM","render","src_App_0","document","getElementById"],"mappings":"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","file":"static/js/main.cfdec8a5.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport * as d3 from \"d3\";\n\n//setting up global values for svg height and width\nconst margin = { left: 50, top: 20, right: 20, bottom: 50 };\nconst height = 500 - margin.top - margin.bottom;\nconst width = 700 - margin.left - margin.right;\n\nclass BarChart extends Component {\n  state = {\n    bars: [],\n    xScale: d3.scaleTime().range([0, width]),\n    yScale: d3.scaleLinear().range([height, 0]),\n    wScale: d3\n      .scaleBand()\n      .range([0, width])\n      .paddingInner(0.1)\n      .paddingOuter(0)\n  };\n\n  //setting up axis and tick formats\n  xAxis = d3.axisBottom(this.state.xScale).tickFormat(d3.timeFormat(\"%b-%Y\"));\n  yAxis = d3.axisLeft(this.state.yScale);\n\n  static getDerivedStateFromProps(nextProps, prevState) {\n    if (!nextProps) return null;\n\n    const { data } = nextProps;\n    const { xScale, yScale, wScale } = prevState;\n\n    //recalculate scales with new data\n    xScale.domain(d3.extent(data, d => d.date));\n    yScale.domain([0, d3.max(data, d => d.value)]);\n    wScale.domain(data.map(d => d.date));\n\n    //create rect x and y values.\n    const bars = data.map(d => {\n      return {\n        x: xScale(d.date),\n        y: yScale(d.value),\n        height: height - yScale(d.value)\n      };\n    });\n\n    return { bars };\n  }\n\n  //update axis when component updates\n  componentDidUpdate() {\n    d3.select(this.refs.xAxis)\n      .transition()\n      .duration(800)\n      .call(this.xAxis);\n    d3.select(this.refs.yAxis)\n      .transition()\n      .duration(800)\n      .call(this.yAxis);\n  }\n\n  render() {\n    return (\n      <svg\n        height={height + margin.top + margin.bottom}\n        width={width + margin.left + margin.right}\n      >\n        <g transform={`translate(${margin.left},${margin.top})`}>\n          {this.state.bars.map((d, i) => {\n            return (\n              <rect\n                key={i}\n                x={d.x}\n                y={d.y}\n                height={d.height}\n                width={this.state.wScale.bandwidth()}\n              />\n            );\n          })}\n          <g ref=\"xAxis\" transform={`translate(0, ${height})`} />\n          <g ref=\"yAxis\" />\n        </g>\n      </svg>\n    );\n  }\n}\n\nexport default BarChart;\n","import React from \"react\";\nimport \"./MetricViewBar.css\";\n\nconst metricViewBar = props => {\n  let buttons;\n\n  if (props.metricNames) {\n    buttons = props.metricNames.map(obj => {\n      return (\n        <button key={obj.id} onClick={props.clicked.bind(this, obj.id)}>\n          {obj.fullName}\n        </button>\n      );\n    });\n  }\n\n  return <div className=\"metric-view-bar\">{buttons}</div>;\n};\n\nexport default metricViewBar;\n","import React from \"react\";\nimport DayPickerInput from \"react-day-picker/DayPickerInput\";\nimport \"react-day-picker/lib/style.css\";\nimport { formatDate, parseDate } from \"react-day-picker/moment\";\nimport \"./SearchOptions.css\";\n\nconst searchOptions = props => {\n  return (\n    <div className=\"SearchOptions\">\n      <div>\n        <label htmlFor=\"search\">Artist:</label>\n        <input\n          id=\"search\"\n          className=\"artistSearchInput\"\n          type=\"text\"\n          placeholder=\"Search An Artist\"\n          onChange={props.handleArtistChange}\n        />\n      </div>\n      <div>\n        <label htmlFor=\"startDt\">Start Date:</label>\n        <DayPickerInput\n          id=\"startDt\"\n          onDayChange={props.handleStartDateChange}\n          formatDate={formatDate}\n          format=\"YYYY-MM-DD\"\n          parseDate={parseDate}\n          value={props.startDate}\n        />\n      </div>\n      <div>\n        <label htmlFor=\"endDt\">End Date:</label>\n        <DayPickerInput\n          id=\"endDt\"\n          onDayChange={props.handleEndDateChange}\n          formatDate={formatDate}\n          format=\"YYYY-MM-DD\"\n          parseDate={parseDate}\n          value={props.endDate}\n        />\n      </div>\n    </div>\n  );\n};\n\nexport default searchOptions;\n","import React, { Component } from \"react\";\nimport \"./App.css\";\nimport axios from \"axios\";\nimport debounce from \"lodash/debounce\";\nimport BarChart from \"./components/BarChart/BarChart\";\nimport MetricViewBar from \"./components/MetricViewBar/MetricViewBar\";\nimport SearchOptions from \"./components/SearchOptions/SearchOptions\";\nimport moment from \"moment\";\n\nclass App extends Component {\n  state = {\n    artist: \"\",\n    artistInfo: null,\n    metrics: null,\n    info: null,\n    metricId: 41,\n    startDate: moment(\"2017-01-01\").format(\"YYYY-MM-DD\"),\n    endDate: moment(\"2017-12-31\").format(\"YYYY-MM-DD\")\n  };\n\n  constructor() {\n    super();\n    this.emitDebouncedSearch = debounce(this.handleArtistSearch, 500);\n  }\n\n  componentDidMount() {\n    this.grabMetricInfo();\n    if (this.state.artist) {\n      this.grabArtistData();\n    }\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    //Only update artist data if new entry is not blank or different from prev entry\n    if (this.state.artist) {\n      if (this.state.artist !== prevState.artist) {\n        this.grabArtistData();\n      }\n      if (this.state.startDate && this.state.endDate) {\n        if (\n          this.state.startDate !== prevState.startDate ||\n          this.state.endDate !== prevState.endDate\n        ) {\n          this.grabArtistData();\n        }\n      }\n    }\n  }\n\n  grabMetricInfo() {\n    axios\n      .get(\"metrics/?fields=items.*\")\n      .then(response => {\n        this.setState({ info: response.data });\n      })\n      .catch(error => console.log(error));\n  }\n\n  grabArtistData() {\n    axios\n      .get(`search/v1/artists/?query=${this.state.artist}&limit=1`)\n      .then(response => {\n        if (!response.data.artists.length) return null;\n        const artistInfo = response.data.artists[0];\n        return axios.get(\n          `artists/${artistInfo.id}/data?metricIds=28,41,11,151,247&startDate=${\n            this.state.startDate\n          }&endDate=${this.state.endDate}&timeseries=totals,deltas`\n        );\n      })\n      .then(response => {\n        if (response) {\n          this.setState({\n            metrics: response.data,\n            metricId: response.data.data[0].metricId\n          });\n          console.log(\"metrics\", response.data);\n          return axios.get(response.data.artist.self.url);\n        }\n      })\n      .then(response => {\n        if (response) {\n          console.log(\"artistinfo\", response.data);\n          this.setState({ artistInfo: response.data });\n        }\n      })\n      .catch(error => console.log(error));\n  }\n\n  handleArtistChange = event => {\n    this.emitDebouncedSearch(event.target.value);\n  };\n\n  handleArtistSearch = val => {\n    this.setState({ artist: val });\n  };\n\n  handleStartDateChange = date => {\n    this.setState({\n      startDate: moment(date).format(\"YYYY-MM-DD\")\n    });\n  };\n\n  handleEndDateChange = date => {\n    this.setState({\n      endDate: moment(date).format(\"YYYY-MM-DD\")\n    });\n  };\n\n  getChartData = id => {\n    const dataArr = this.state.metrics.data.filter(item => {\n      return item.metricId === id;\n    });\n    if (dataArr.length) {\n      const data = dataArr[0].timeseries.deltas;\n      const chartData = Object.keys(data).map(keys => {\n        return { date: new Date(keys), value: data[keys] };\n      });\n      return chartData;\n    }\n  };\n\n  handleMetricIdChange = id => {\n    this.setState({ metricId: id });\n  };\n\n  render() {\n    //initialize dom elements as nulls until artis data is retrieved.\n    let image, info, genre, barChart, metricNames;\n\n    if (this.state.artistInfo) {\n      image = (\n        <img\n          height=\"100\"\n          src={this.state.artistInfo.images[0][100]}\n          alt=\"Artist\"\n        />\n      );\n      info = <h1>Artist Name: {this.state.artistInfo.name}</h1>;\n      genre = <h2>Genre: {this.state.artistInfo.genres.join(\" \")}</h2>;\n    }\n\n    if (this.state.metrics) {\n      // populate barchart with data\n      barChart = <BarChart data={this.getChartData(this.state.metricId)} />;\n\n      //grab list of metric full names.\n      metricNames = this.state.metrics.data\n        .reduce((acc, metric) => {\n          for (let m of this.state.info.items) {\n            if (m.id === metric.metricId) {\n              acc.push({ fullName: m.fullName, id: m.id });\n              break;\n            }\n          }\n          return acc;\n        }, [])\n        .sort((a, b) => {\n          return a.id - b.id;\n        });\n    }\n\n    return (\n      <>\n        <div className=\"App\">\n          <SearchOptions\n            handleArtistChange={this.handleArtistChange}\n            handleStartDateChange={this.handleStartDateChange}\n            handleEndDateChange={this.handleEndDateChange}\n            startDate={this.state.startDate}\n            endDate={this.state.endDate}\n          />\n          <div className=\"artist-info\">\n            {image}\n            <div style={{ textAlign: \"center\" }}>\n              {info}\n              {genre}\n            </div>\n          </div>\n          {barChart}\n          <MetricViewBar\n            clicked={this.handleMetricIdChange}\n            metricNames={metricNames}\n          />\n        </div>\n      </>\n    );\n  }\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport axios from \"axios\";\n\nconst publicKey = \"eb74a82009cbc53c9b44866743633f9d\";\n\naxios.defaults.baseURL = \"https://api.nextbigsound.com/\";\naxios.defaults.params = {};\naxios.defaults.params[\"access_token\"] = publicKey;\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n"],"sourceRoot":""}