{"version":3,"sources":["components/NavigationBar/NavigationBar.js","components/UI/Spinner/Spinner.js","containers/ArtistInfo/ArtistInfo.js","components/BarChart/Rect/Rect.js","components/BarChart/BarChart.js","components/MetricViewBar/MetricViewBar.js","containers/SocialMediaMetrics/SocialMediaMetrics.js","components/BubbleChart/BubbleChart.js","components/TrackViewBar/TrackViewBar.js","containers/TrackMetrics/TrackMetrics.js","App.js","index.js"],"names":["navigationBar","props","react_default","a","createElement","className","id","type","placeholder","onChange","handleArtistChange","href","spinner","artistInfo","image","info","genre","content","isLoaded","Spinner_Spinner","height","src","images","alt","name","genres","join","Fragment","style","textAlign","Rect","state","x","y","width","fill","this","animateRect","_this$state","yExtent","d3","refs","rect","attr","yScale","transition","duration","_this$state2","ref","nextProps","prevState","Component","margin","BarChart","bars","xScale","range","wScale","paddingInner","paddingOuter","accentScale","xAxis","_this","tickFormat","yAxis","nextState","drawAxis","call","selectAll","_this2","transform","concat","map","d","i","BarChart_Rect_Rect","key","bandwidth","textAnchor","yLabel","chartData","startDate","endDate","data","filter","sDate","moment","unix","eDate","date","value","domain","metricViewBar","buttons","metricNames","obj","onClick","clicked","bind","fullName","Range","createSliderWithTooltip","Slider","startDateUnix","Date","subtract","endDateUnix","socialMediaMetrics","chartTitle","metrics","getChartData","metricId","reduce","acc","metric","m","metricMetadata","console","log","push","sort","b","cArr","split","length","MetricViewBar_MetricViewBar","handleMetricIdChange","marginBottom","components_BarChart_BarChart","format","defaultValue","min","max","step","allowCross","tipFormatter","onAfterChange","onRangeChange","simulation","force","strength","BubbleChart","circles","rScale","cScale","forceTick","node","radius","on","renderCircles","nodes","alpha","restart","_this3","_this4","svgContainer","exit","remove","nodeEnter","enter","append","label","val","merge","select","text","substring","top15","summary","TW","slice","metadata","asset_name","trackViewBar","trackMetrics","handleTrackIdChange","circleData","bubbleTitle","trackMetricId","getTrackData","TrackViewBar_TrackViewBar","components_BubbleChart_BubbleChart","App","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","artist","artistId","bubbleData","event","emitDebouncedSearch","target","handleArtistSearch","setState","dataArr","item","timeseries","deltas","totals","keys","e","debounce","grabMetricMetadata","grabArtistMetric","prevProps","axios","get","then","response","metricTitles","items","description","catch","error","artists","resetArtistInfo","grabTrackMetrics","grabArtistInfo","_this5","tMetric","objectSpread","NavigationBar_NavigationBar","ArtistInfo_ArtistInfo","SocialMediaMetrics_SocialMediaMetrics","TrackMetrics_TrackMetrics","defaults","baseURL","params","ReactDOM","render","src_App_0","document","getElementById"],"mappings":"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","file":"static/js/main.344ce059.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./NavigationBar.css\";\n\nconst navigationBar = props => {\n  return (\n    <nav className=\"NavigationBar\">\n      <div className=\"NavigationBar__search-bar\">\n        <input\n          id=\"search\"\n          className=\"artistSearchInput\"\n          type=\"text\"\n          placeholder=\"Search For An Artist\"\n          onChange={props.handleArtistChange}\n        />\n      </div>\n      <div className=\"NavigationBar__links\">\n        <ul className=\"NavigationBar__ul\">\n          <li className=\"NavigationBar__li\">\n            <a href=\"#artistInfo\" className=\"NavigationBar__href\">\n              Artist Info\n            </a>\n          </li>\n          <li className=\"NavigationBar__li\">\n            <a href=\"#socialMedia\" className=\"NavigationBar__href\">\n              Social Media\n            </a>\n          </li>\n          <li className=\"NavigationBar__li\">\n            <a href=\"#trackSpins\" className=\"NavigationBar__href\">\n              Track Spins\n            </a>\n          </li>\n        </ul>\n      </div>\n    </nav>\n  );\n};\n\nexport default navigationBar;\n","import React from \"react\";\nimport \"./Spinner.css\";\n\nconst spinner = () => {\n  return <div className=\"Loader\">Loading...</div>;\n};\n\nexport default spinner;\n","import React from \"react\";\nimport Spinner from \"../../components/UI/Spinner/Spinner\";\nimport \"./ArtistInfo.css\";\n\nconst artistInfo = props => {\n  let image = null;\n  let info = null;\n  let genre = null;\n  let content = null;\n\n  //if search is pending. show loading spinner.\n  if (props.isLoaded) {\n    content = <Spinner />;\n  }\n\n  //when artist info is retrived. load content instead of spinner.\n  if (props.artistInfo) {\n    image = (\n      <img height=\"100\" src={props.artistInfo.images[0][100]} alt=\"Artist\" />\n    );\n    info = <h1>Artist Name: {props.artistInfo.name}</h1>;\n    genre = <h2>Genre: {props.artistInfo.genres.join(\" \")}</h2>;\n\n    content = (\n      <>\n        {image}\n        <div style={{ textAlign: \"center\" }}>\n          {info}\n          {genre}\n        </div>\n      </>\n    );\n  }\n\n  return (\n    <div id=\"artistInfo\" className=\"ArtistInfo\">\n      <div className=\"ArtistInfo__label\">\n        <span>Artist Info</span>\n      </div>\n      <div className=\"ArtistInfo__info\">{content}</div>\n    </div>\n  );\n};\n\nexport default artistInfo;\n","import React, { Component } from \"react\";\nimport * as d3 from \"d3\";\n\nclass Rect extends Component {\n  state = { x: null, y: null, width: null, height: null, fill: null };\n\n  static getDerivedStateFromProps(nextProps, prevState) {\n    if (!nextProps) return null;\n\n    return {\n      x: nextProps.x,\n      y: nextProps.y,\n      width: nextProps.width,\n      height: nextProps.height,\n      fill: nextProps.fill\n    };\n  }\n\n  componentDidMount() {\n    this.animateRect();\n  }\n\n  componentDidUpdate() {\n    this.animateRect();\n  }\n\n  animateRect() {\n    const { y, height } = this.state;\n\n    let rect;\n\n    //use yExtent if exists, if not use linear scale from range 0\n    if (this.props.yExtent) {\n      rect = d3\n        .select(this.refs.rect)\n        .attr(\"y\", this.props.yScale(this.props.yExtent[0]));\n    } else {\n      rect = d3.select(this.refs.rect).attr(\"y\", this.props.yScale(0));\n    }\n\n    //set up bar transition\n    rect\n      .attr(\"height\", 0)\n      .transition()\n      .duration(800)\n      .attr(\"y\", y)\n      .attr(\"height\", height);\n  }\n\n  render() {\n    const { x, y, height, width, fill } = this.state;\n\n    return (\n      <rect ref=\"rect\" x={x} y={y} height={height} width={width} fill={fill} />\n    );\n  }\n}\n\nexport default Rect;\n","import React, { Component } from \"react\";\nimport Rect from \"./Rect/Rect\";\nimport moment from \"moment\";\nimport * as d3 from \"d3\";\nimport \"./BarChart.css\";\n\n//setting up global values for svg height and width\nconst margin = { left: 100, top: 20, right: 20, bottom: 50 };\nconst height = 480 - margin.top - margin.bottom;\nconst width = 800 - margin.left - margin.right;\n\nclass BarChart extends Component {\n  state = {\n    bars: [],\n    xScale: d3.scaleTime().range([0, width]),\n    yScale: d3.scaleLinear().range([height, 0]),\n    //yScale: d3.scaleLog().range([height, 0]),\n    wScale: d3\n      .scaleBand()\n      .range([0, width])\n      .paddingInner(0.1)\n      .paddingOuter(0),\n    accentScale: d3.scaleSequential(d3.interpolateRdBu),\n    yExtent: null\n  };\n\n  //setting up axis and tick formats\n  xAxis = d3.axisBottom(this.state.xScale).tickFormat(d3.timeFormat(\"%b-%Y\"));\n  yAxis = d3.axisLeft(this.state.yScale);\n  //.ticks(4)\n  //.tickFormat(function(d) {\n  // return d;\n  //});\n\n  static getDerivedStateFromProps(nextProps, prevState) {\n    //console.log(\"getDerivedStateFromProps\", nextProps, !nextProps);\n    if (!nextProps) return null;\n\n    const { chartData, startDate, endDate } = nextProps;\n    //console.log(data);\n    const { xScale, yScale, wScale, accentScale } = prevState;\n\n    //clean data\n    const data = chartData\n      .filter(d => {\n        let sDate = moment.unix(startDate);\n        let eDate = moment.unix(endDate);\n        let date = moment(d.date);\n        return d.value && d.date && date >= sDate && date <= eDate;\n      })\n      .map(d => {\n        d.value = +d.value;\n        return d;\n      });\n\n    //recalculate scales with new data\n    xScale.domain(d3.extent(data, d => d.date));\n    yScale.domain([0, d3.max(data, d => d.value)]);\n    //Below is yscale for log\n    //const yExtent = d3.extent(data, d => d.value);\n    //yScale.domain(d3.extent(data, d => d.value));\n    wScale.domain(data.map(d => d.date));\n    accentScale.domain([d3.max(data, d => d.value), 0]);\n\n    //create rect x and y values.\n    const bars = data.map(d => {\n      return {\n        x: xScale(d.date),\n        y: yScale(d.value),\n        height: height - yScale(d.value),\n        fill: accentScale(d.value)\n      };\n    });\n\n    return { bars, yScale };\n  }\n\n  //Only update barChart if data has been changed.\n  shouldComponentUpdate(nextProps, nextState) {\n    //console.log(\"shouldComponentUpdate: this.state =\", this.state);\n    //console.log(\"shouldComponentUpdate: nextSate =\", nextState);\n    //console.log(this.state.bars !== nextState.bars);\n    return true;\n  }\n\n  //happens once. render x and y axis on loadup.\n  componentDidMount() {\n    this.drawAxis();\n  }\n\n  //update axis when component updates\n  componentDidUpdate() {\n    this.drawAxis();\n  }\n\n  drawAxis() {\n    d3.select(this.refs.xAxis)\n      .transition()\n      .duration(800)\n      .call(this.xAxis)\n      .selectAll(\"text\")\n      .style(\"text-anchor\", \"end\")\n      .attr(\"dx\", \"-.8em\")\n      .attr(\"dy\", \".15em\")\n      .attr(\"transform\", \"rotate(-65)\");\n    d3.select(this.refs.yAxis)\n      .transition()\n      .duration(800)\n      .call(this.yAxis);\n  }\n\n  render() {\n    return (\n      <svg\n        height={height + margin.top + margin.bottom}\n        width={width + margin.left + margin.right}\n      >\n        <g transform={`translate(${margin.left},${margin.top})`}>\n          {this.state.bars.map((d, i) => {\n            return (\n              <Rect\n                key={i}\n                x={d.x}\n                y={d.y}\n                height={d.height}\n                width={this.state.wScale.bandwidth()}\n                fill={d.fill}\n                yScale={this.state.yScale}\n                // yExtent={this.state.yExtent}\n              />\n            );\n          })}\n          <g ref=\"xAxis\" transform={`translate(0, ${height})`} />\n          <g ref=\"yAxis\" />\n\n          <text\n            className=\"BarChart-yLabel\"\n            x={-(height / 2)}\n            y={-80}\n            transform=\"rotate(-90)\"\n            textAnchor=\"middle\"\n          >\n            {this.props.yLabel}\n          </text>\n        </g>\n      </svg>\n    );\n  }\n}\n\nexport default BarChart;\n","import React from \"react\";\nimport \"./MetricViewBar.css\";\n\nconst metricViewBar = props => {\n  let buttons;\n\n  if (props.metricNames) {\n    buttons = props.metricNames.map(obj => {\n      return (\n        <button\n          key={obj.id}\n          className=\"MetricView__buttons\"\n          onClick={props.clicked.bind(this, obj.id)}\n        >\n          {obj.fullName}\n        </button>\n      );\n    });\n  }\n\n  return <div className=\"MetricViews\">{buttons}</div>;\n};\n\nexport default metricViewBar;\n","import React from \"react\";\nimport Spinner from \"../../components/UI/Spinner/Spinner\";\nimport BarChart from \"../../components/BarChart/BarChart\";\nimport MetricViewBar from \"../../components/MetricViewBar/MetricViewBar\";\nimport Slider from \"rc-slider\";\n//import Range from \"rc-slider/lib/Range\";\nimport moment from \"moment\";\nimport \"rc-slider/assets/index.css\";\nimport \"./SocialMediaMetrics.css\";\n\nconst createSliderWithTooltip = Slider.createSliderWithTooltip;\nconst Range = createSliderWithTooltip(Slider.Range);\n//get 5 years ago in unix time\nconst startDateUnix = moment(new Date())\n  .subtract(5, \"y\")\n  .unix();\n//get todays date in unix time\nconst endDateUnix = moment(new Date()).unix();\n\nconst socialMediaMetrics = props => {\n  // let barChart = null;\n  let data = null;\n  let metricNames = null;\n  let content = null;\n  let chartTitle = null;\n  let yLabel = null;\n\n  if (props.isLoaded) {\n    content = <Spinner />;\n  }\n  //only do work if metrics is not null;\n  if (props.metrics) {\n    //Grab data if metric Id was changed\n    data = props.getChartData(props.metricId);\n\n    //grab list of metric names. gets passed into metric view bar.\n    metricNames = props.metrics.data\n      .reduce((acc, metric) => {\n        //look up fullName for each existing metric for artist.\n        let m = props.metricMetadata[metric.metricId];\n        console.log(m);\n        if (m) {\n          acc.push({ fullName: m.fullName, id: metric.metricId });\n        }\n        return acc;\n      }, [])\n      .sort((a, b) => {\n        return a.id - b.id;\n      });\n\n    chartTitle = props.metricMetadata[props.metricId].fullName;\n\n    //grab the last word for y label. gets passed into bar chart.\n    let cArr = chartTitle.split(\" \");\n    yLabel = cArr[cArr.length - 1];\n\n    content = (\n      <>\n        <MetricViewBar\n          clicked={props.handleMetricIdChange}\n          metricNames={metricNames}\n          chartTitle={chartTitle}\n        />\n        <h1 style={{ marginBottom: \".3em\" }}>{chartTitle}</h1>\n        <BarChart\n          chartData={data}\n          yLabel={yLabel}\n          startDate={props.startDate}\n          endDate={props.endDate}\n        />\n        <span className=\"SocialMediaMetrics__metrics-date-range\">\n          {moment.unix(props.startDate).format(\"MMM Do YYYY\")}\n          {\"   -   \"}\n          {moment.unix(props.endDate).format(\"MMM Do YYYY\")}\n        </span>\n        <Range\n          className=\"SocialMediaMetrics__metrics-range-slider\"\n          defaultValue={[props.startDate, props.endDate]}\n          min={startDateUnix}\n          max={endDateUnix}\n          step={86400 /*1 day in seconds*/}\n          allowCross={false}\n          tipFormatter={value => moment.unix(value).format(\"MMM Do YYYY\")}\n          onAfterChange={props.onRangeChange}\n        />\n      </>\n    );\n  }\n\n  //return barChart;\n  return (\n    <div id=\"socialMedia\" className=\"SocialMediaMetrics\">\n      <div className=\"SocialMediaMetrics__label\">\n        <span>Social Media</span>\n      </div>\n      <div className=\"SocialMediaMetrics__metrics\">{content}</div>\n    </div>\n  );\n};\n\nexport default socialMediaMetrics;\n","import React, { Component } from \"react\";\nimport * as d3 from \"d3\";\n\n//setting up global values for svg height and width\nconst margin = { left: 20, top: 20, right: 20, bottom: 20 };\nconst height = 600 - margin.top - margin.bottom;\nconst width = 800 - margin.left - margin.right;\n\n//setup the simulation for the bubbles to explode from the center on data change\nconst simulation = d3\n  .forceSimulation()\n  .force(\"center\", d3.forceCenter(width / 2, height / 2))\n  .force(\"charge\", d3.forceManyBody().strength(200));\n\nclass BubbleChart extends Component {\n  state = {\n    circles: [],\n    rScale: d3.scaleLinear().range([30, 125]),\n    cScale: d3.scaleOrdinal(d3.schemePaired)\n  };\n\n  static getDerivedStateFromProps(nextProps, prevState) {\n    //console.log(\"getDerivedStateFromProps\", nextProps,prevState);\n    if (!nextProps) return null;\n    const { data } = nextProps;\n    const { rScale, cScale } = prevState;\n\n    //filter top 10\n    let sortedData = data.sort((a, b) => {\n      return b.summary.TW - a.summary.TW;\n    });\n\n    const top15 = sortedData.slice(0, 15);\n\n    console.log(\"top15\", top15);\n    //Update scales with new data\n    rScale.domain(d3.extent(top15, d => d.summary.TW));\n    cScale.domain(top15, d => d.metadata.asset_name);\n\n    //create data for circles\n    const circles = top15.map(data => {\n      return { name: data.metadata.asset_name, value: data.summary.TW };\n    });\n\n    return { circles };\n  }\n\n  componentDidMount() {\n    simulation\n      .force(\n        \"collision\",\n        d3.forceCollide().radius(d => this.state.rScale(d.value))\n      )\n      .on(\"tick\", this.forceTick);\n    this.renderCircles();\n    simulation\n      .nodes(this.state.circles)\n      .alpha(0.9)\n      .restart();\n  }\n\n  componentDidUpdate() {\n    //console.log(\"bubbleChart: componentDidUpdate\");\n    //console.log(this.state.circles);\n\n    simulation\n      .force(\n        \"collision\",\n        d3.forceCollide().radius(d => this.state.rScale(d.value))\n      )\n      .on(\"tick\", this.forceTick);\n\n    this.renderCircles();\n\n    simulation\n      .nodes(this.state.circles)\n      .alpha(0.9)\n      .restart();\n  }\n\n  renderCircles() {\n    console.log(\"renderCircles\", this.state.circles);\n\n    //JOIN\n    this.node = d3\n      .select(this.refs.svgContainer)\n      .selectAll(\"g\")\n      .data(this.state.circles);\n\n    //EXIT\n    this.node.exit().remove();\n\n    //ENTER\n    this.nodeEnter = this.node.enter().append(\"g\");\n    this.circles = this.nodeEnter.append(\"circle\");\n    this.label = this.nodeEnter.append(\"text\").attr(\"id\", \"label\");\n    this.val = this.nodeEnter.append(\"text\").attr(\"id\", \"val\");\n\n    //ENTER + UPDATE\n    this.node = this.nodeEnter.merge(this.node);\n    this.node\n      .select(\"circle\")\n      .attr(\"y\", 1)\n      .attr(\"r\", d => this.state.rScale(d.value))\n      .attr(\"fill\", d => this.state.cScale(d.name));\n\n    //ENTER + UPDATE\n    this.node = this.nodeEnter.merge(this.node);\n    this.node\n      .select(\"#label\")\n      .attr(\"text-anchor\", \"middle\")\n      .attr(\"font-size\", d => this.state.rScale(d.value) / 4)\n      .attr(\"fill\", \"black\")\n      .attr(\"font-family\", \"'Pragati Narrow', sans-serif\")\n      .text(d => {\n        //saving time instead of focusing on how to get text to wrap.\n        if (d.name.length > 17 && this.state.rScale(d.value) / 3 > 17)\n          return d.name.substring(0, 17);\n        return d.name.substring(0, this.state.rScale(d.value) / 3);\n      });\n\n    //ENTER + UPDATE\n    this.node = this.nodeEnter.merge(this.node);\n    this.node\n      .select(\"#val\")\n      .attr(\"text-anchor\", \"middle\")\n      .attr(\"font-size\", d => this.state.rScale(d.value) / 4)\n      .attr(\"dy\", \"1em\")\n      .attr(\"fill\", \"black\")\n      .attr(\"font-family\", \"'Pragati Narrow', sans-serif\")\n      .text(d => d3.format(\",\")(d.value));\n  }\n\n  //update positioning of group every tick.\n  forceTick = () => {\n    this.node.attr(\"transform\", d => `translate(${d.x}, ${d.y})`);\n  };\n\n  render() {\n    return <svg ref=\"svgContainer\" width={width} height={height} />;\n  }\n}\n\nexport default BubbleChart;\n","import React from \"react\";\nimport \"./TrackViewBar.css\";\n\nconst trackViewBar = props => {\n  return (\n    <div className=\"TrackViews\">\n      {props.trackMetrics[410] ? (\n        <button onClick={props.handleTrackIdChange.bind(this, 410)}>\n          {props.metricMetadata[410].fullName}\n        </button>\n      ) : null}\n      {props.trackMetrics[411] ? (\n        <button onClick={props.handleTrackIdChange.bind(this, 411)}>\n          {props.metricMetadata[411].fullName}\n        </button>\n      ) : null}\n      {props.trackMetrics[413] ? (\n        <button onClick={props.handleTrackIdChange.bind(this, 413)}>\n          {props.metricMetadata[413].fullName}\n        </button>\n      ) : null}\n      {props.trackMetrics[414] ? (\n        <button onClick={props.handleTrackIdChange.bind(this, 414)}>\n          {props.metricMetadata[414].fullName}\n        </button>\n      ) : null}\n    </div>\n  );\n};\n\nexport default trackViewBar;\n","import React from \"react\";\nimport BubbleChart from \"../../components/BubbleChart/BubbleChart\";\nimport Spinner from \"../../components/UI/Spinner/Spinner\";\nimport \"./TrackMetrics.css\";\nimport TrackViewBar from \"../../components/TrackViewBar/TrackViewBar\";\n\nconst trackMetrics = props => {\n  let circleData = null;\n  let content = null;\n  let bubbleTitle = null;\n\n  if (props.isLoaded) {\n    content = <Spinner />;\n  }\n\n  if (props.trackMetrics[props.trackMetricId]) {\n    //grab bubble chart data with new metric id.\n    circleData = props.getTrackData(props.trackMetricId);\n\n    //grab chart title from metric dictionary.\n    bubbleTitle = props.metricMetadata[props.trackMetricId].fullName;\n\n    content = (\n      <>\n        <TrackViewBar\n          trackMetrics={props.trackMetrics}\n          handleTrackIdChange={props.handleTrackIdChange}\n          metricMetadata={props.metricMetadata}\n        />\n        <h1 className=\"TrackMetrics__metrics-title\">{bubbleTitle}</h1>\n        <BubbleChart className=\"BubbleChart\" data={circleData} />\n      </>\n    );\n  }\n\n  return (\n    <div id=\"trackSpins\" className=\"TrackMetrics\">\n      <div className=\"TrackMetrics__label\">\n        <span>Track Spins</span>\n      </div>\n      <div className=\"TrackMetrics__metrics\">{content}</div>\n    </div>\n  );\n};\n\nexport default trackMetrics;\n","import React, { Component } from \"react\";\nimport \"./App.css\";\nimport axios from \"axios\";\nimport debounce from \"lodash/debounce\";\nimport NavigationBar from \"./components/NavigationBar/NavigationBar\";\nimport ArtistInfo from \"./containers/ArtistInfo/ArtistInfo\";\nimport SocialMediaMetrics from \"./containers/SocialMediaMetrics/SocialMediaMetrics\";\nimport TrackMetrics from \"./containers/TrackMetrics/TrackMetrics\";\nimport moment from \"moment\";\n\nclass App extends Component {\n  state = {\n    artist: \"\",\n    artistId: \"\",\n    artistInfo: null,\n    metrics: null,\n    metricMetadata: null,\n    metricId: 41,\n    trackMetricId: 410,\n    trackMetrics: {},\n    startDate: moment(new Date())\n      .subtract(5, \"y\")\n      .unix(),\n    endDate: moment(new Date()).unix(),\n    bubbleData: [],\n    isLoaded: false\n  };\n\n  constructor(props) {\n    super(props);\n    this.emitDebouncedSearch = debounce(this.handleArtistSearch, 500);\n  }\n  //Search Artis Event Handlers\n  handleArtistChange = event => {\n    this.emitDebouncedSearch(event.target.value);\n  };\n  handleArtistSearch = val => {\n    this.setState({ artist: val });\n  };\n\n  componentDidMount() {\n    this.grabMetricMetadata();\n    if (this.state.artist) {\n      this.grabArtistMetric();\n      //this.grabArtistInfo();\n    }\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    //Only update artist data if new entry is not blank or different from prev entry\n    if (this.state.artist) {\n      if (this.state.artist !== prevState.artist) {\n        this.grabArtistMetric();\n        //this.grabArtistInfo();\n      }\n    }\n  }\n\n  resetArtistInfo() {\n    this.setState({ trackMetrics: {}, metrics: null, artistInfo: null });\n  }\n\n  //Grabs the metric meta data.\n  grabMetricMetadata() {\n    axios\n      .get(\"metrics/?fields=items.*\")\n      .then(response => {\n        //grab fullname and descriptions for corresponding ids.\n        let metricTitles = response.data.items.reduce((acc, m) => {\n          acc[m.id] = { fullName: m.fullName, description: m.description };\n          return acc;\n        }, {});\n\n        this.setState({ metricMetadata: metricTitles });\n      })\n      .catch(error => console.log(error, \"grabMetricMetadata\"));\n  }\n\n  //method to grab artist metrics.\n  grabArtistMetric() {\n    //Grab 5 years of data\n    const startDate = moment(new Date())\n      .subtract(5, \"y\")\n      .format(\"YYYY-MM-DD\");\n    const endDate = moment(new Date()).format(\"YYYY-MM-DD\");\n\n    //API searches for one artist.\n    axios\n      .get(`search/v1/artists/?query=${this.state.artist}&limit=1`)\n      .then(response => {\n        if (!response.data.artists.length) return null;\n\n        //When searching for new artist. Set is loaded to true. Add spinner bars for each section.\n        this.setState({ isLoaded: true });\n        this.resetArtistInfo();\n\n        //Set state for artist info.\n        const artistInfo = response.data.artists[0];\n        this.setState({ artistId: artistInfo.id });\n\n        //grab Track metrics\n        this.grabTrackMetrics();\n\n        //grab artist info\n        this.grabArtistInfo();\n\n        //set metrics to null when searching for new artist metrics;\n        this.setState({ metrics: null });\n        //Grabs Social Media Metrics\n        //id: 28, 41, 11, 151, 247\n        return axios.get(\n          `artists/${\n            artistInfo.id\n          }/data?metricIds=28,41,11,151,247&startDate=${startDate}&endDate=${endDate}&timeseries=totals,deltas`\n        );\n      })\n      .then(response => {\n        if (response) {\n          this.setState({\n            metrics: response.data,\n            metricId: response.data.data[0].metricId\n          });\n          //console.log(\"metrics\", response.data);\n        }\n      })\n      .catch(error => console.log(error, \"grabArtistMetric\"));\n  }\n\n  //Grabs Artist Info\n  grabArtistInfo() {\n    //set artist info to null when searching for new artist info.\n    this.setState({ artistInfo: null });\n\n    axios\n      .get(`artists/${this.state.artistId}/`)\n      .then(response => {\n        if (response) {\n          //console.log(\"artistinfo\", response.data);\n          this.setState({ artistInfo: response.data });\n        }\n      })\n      .catch(error => console.log(error, \"grabArtistInfo\"));\n  }\n\n  //Grab Artist Track Metrics\n  grabTrackMetrics() {\n    //set track Metrics to null when searching new metrics.\n    this.setState({ trackMetrics: {} });\n\n    //grab track metrics in order.\n    axios\n      .get(`metrics/v1/entity/${this.state.artistId}/nestedAssets?metric=410`)\n      .then(response => {\n        console.log(\"track metric410\", response.data);\n        const tMetric = { ...this.state.trackMetrics };\n        //if theres no track metrics. API returns empty array. set trackMetrics state null\n        if (!response.data.data) {\n          tMetric[410] = null;\n        } else {\n          tMetric[410] = response.data;\n        }\n        this.setState({ trackMetrics: tMetric });\n        return axios.get(\n          `metrics/v1/entity/${this.state.artistId}/nestedAssets?metric=411`\n        );\n      })\n      .then(response => {\n        console.log(\"track metric411\", response.data);\n        const tMetric = { ...this.state.trackMetrics };\n        //if theres no track metrics. API returns empty array. set trackMetrics state null\n        if (!response.data.data) {\n          tMetric[411] = null;\n        } else {\n          tMetric[411] = response.data;\n        }\n        this.setState({ trackMetrics: tMetric });\n        return axios.get(\n          `metrics/v1/entity/${this.state.artistId}/nestedAssets?metric=413`\n        );\n      })\n      .then(response => {\n        console.log(\"track metric413\", response.data);\n        const tMetric = { ...this.state.trackMetrics };\n        //if theres no track metrics. API returns empty array. set trackMetrics state null\n        if (!response.data.data) {\n          tMetric[413] = null;\n        } else {\n          tMetric[413] = response.data;\n        }\n        this.setState({ trackMetrics: tMetric });\n        return axios.get(\n          `metrics/v1/entity/${this.state.artistId}/nestedAssets?metric=414`\n        );\n      })\n      .then(response => {\n        console.log(\"track metric414\", response.data);\n        const tMetric = { ...this.state.trackMetrics };\n        //if theres no track metrics. API returns empty array. set trackMetrics state null\n        if (!response.data.data) {\n          tMetric[414] = null;\n        } else {\n          tMetric[414] = response.data;\n        }\n        this.setState({ trackMetrics: tMetric });\n      })\n      .catch(error => console.log(error, \"grabTrackMetrics\"));\n  }\n\n  //Filters through an array of metric arrays and returns matching metric ID to pass to barChart component.\n  getChartData = id => {\n    const dataArr = this.state.metrics.data.filter(item => {\n      return item.metricId === id;\n    });\n\n    //if data exists for metric id. grab deltas or totals\n    //refactor this code to create data with both deltas and totals. -AWOO\n    if (dataArr.length) {\n      let data;\n      if (id === 41 || id === 247) {\n        data = dataArr[0].timeseries.deltas;\n      } else {\n        data = dataArr[0].timeseries.totals;\n      }\n      const chartData = Object.keys(data).map(keys => {\n        return { date: new Date(keys), value: data[keys] };\n      });\n\n      return chartData;\n    }\n  };\n\n  //get track data\n  getTrackData = id => {\n    if (this.state.trackMetrics[id]) {\n      return this.state.trackMetrics[id].data.filter(data => {\n        return data.summary.TW;\n      });\n    }\n  };\n\n  handleMetricIdChange = id => {\n    if (this.state.metricId !== id) {\n      this.setState({ metricId: id });\n    }\n  };\n\n  onRangeChange = e => {\n    //manage dates with moment js. convert to unix time format. set state for endDate-startDate\n    if (this.state.startDate !== e[0] || this.state.endDate !== e[1]) {\n      this.setState({ startDate: e[0], endDate: e[1] });\n    }\n  };\n\n  handleTrackIdChange = id => {\n    if (this.state.trackMetricId !== id) {\n      this.setState({ trackMetricId: id });\n    }\n  };\n\n  render() {\n    let {\n      artistInfo,\n      metrics,\n      metricId,\n      metricMetadata,\n      trackMetricId,\n      trackMetrics,\n      isLoaded,\n      startDate,\n      endDate\n    } = this.state;\n\n    return (\n      <>\n        <div className=\"App\">\n          <NavigationBar handleArtistChange={this.handleArtistChange} />\n\n          {isLoaded ? (\n            <>\n              <ArtistInfo artistInfo={artistInfo} isLoaded={isLoaded} />\n\n              <SocialMediaMetrics\n                isLoaded={isLoaded}\n                metrics={metrics}\n                onRangeChange={this.onRangeChange}\n                handleMetricIdChange={this.handleMetricIdChange}\n                metricMetadata={metricMetadata}\n                getChartData={this.getChartData}\n                metricId={metricId}\n                startDate={startDate}\n                endDate={endDate}\n              />\n\n              <TrackMetrics\n                isLoaded={isLoaded}\n                metricMetadata={metricMetadata}\n                trackMetricId={trackMetricId}\n                trackMetrics={trackMetrics}\n                getTrackData={this.getTrackData}\n                handleTrackIdChange={this.handleTrackIdChange}\n              />\n            </>\n          ) : null}\n        </div>\n      </>\n    );\n  }\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport axios from \"axios\";\n\nconst publicKey = \"eb74a82009cbc53c9b44866743633f9d\";\n\naxios.defaults.baseURL = \"https://api.nextbigsound.com/\";\naxios.defaults.params = {};\naxios.defaults.params[\"access_token\"] = publicKey;\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n"],"sourceRoot":""}