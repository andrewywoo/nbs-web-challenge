{"version":3,"sources":["components/MetricViewBar/MetricViewBar.js","components/SearchOptions/SearchOptions.js","components/ArtistInfo/ArtistInfo.js","components/Rect/Rect.js","components/BarChart/BarChart.js","components/SocialMediaMetrics/SocialMediaMetrics.js","App.js","index.js"],"names":["metricViewBar","props","buttons","metricNames","map","obj","react_default","a","createElement","key","id","onClick","clicked","bind","fullName","className","searchOptions","htmlFor","type","placeholder","onChange","handleArtistChange","artistInfo","image","info","genre","height","src","images","alt","name","genres","join","style","textAlign","Rect","state","x","y","width","fill","_this$state","this","yExtent","d3","refs","rect","attr","yScale","transition","duration","_this$state2","ref","nextProps","prevState","Component","margin","BarChart","bars","xScale","range","wScale","paddingInner","paddingOuter","accentScale","xAxis","_this","tickFormat","yAxis","call","_this2","transform","concat","d","i","components_Rect_Rect","bandwidth","data","domain","date","value","socialMediaMetrics","barChart","Fragment","components_BarChart_BarChart","Range_default","defaultValue","min","max","allowCross","onRangeChange","App","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","artist","artistId","metrics","metricMetadata","metricId","startDate","moment","format","endDate","event","emitDebouncedSearch","target","handleArtistSearch","val","setState","handleStartDateChange","handleEndDateChange","getChartData","console","log","dataArr","filter","item","length","timeseries","deltas","totals","keys","Date","handleMetricIdChange","e","debounce","grabMetricMetadata","grabArtistMetric","prevProps","axios","get","then","response","catch","error","_this3","artists","grabArtistInfo","reduce","acc","metric","_iteratorNormalCompletion","_didIteratorError","_iteratorError","undefined","_step","_iterator","items","Symbol","iterator","next","done","m","push","err","return","sort","b","SearchOptions_SearchOptions","ArtistInfo_ArtistInfo","SocialMediaMetrics_SocialMediaMetrics","onRangeChang","MetricViewBar_MetricViewBar","defaults","baseURL","params","ReactDOM","render","src_App_0","document","getElementById"],"mappings":"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","file":"static/js/main.927c214e.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./MetricViewBar.css\";\n\nconst metricViewBar = props => {\n  let buttons;\n\n  if (props.metricNames) {\n    buttons = props.metricNames.map(obj => {\n      return (\n        <button key={obj.id} onClick={props.clicked.bind(this, obj.id)}>\n          {obj.fullName}\n        </button>\n      );\n    });\n  }\n\n  return <div className=\"metric-view-bar\">{buttons}</div>;\n};\n\nexport default metricViewBar;\n","import React from \"react\";\n//import DayPickerInput from \"react-day-picker/DayPickerInput\";\n//import \"react-day-picker/lib/style.css\";\n//import { formatDate, parseDate } from \"react-day-picker/moment\";\nimport \"./SearchOptions.css\";\n\nconst searchOptions = props => {\n  return (\n    <div className=\"SearchOptions\">\n      <div>\n        <label htmlFor=\"search\">Artist:</label>\n        <input\n          id=\"search\"\n          className=\"artistSearchInput\"\n          type=\"text\"\n          placeholder=\"Search An Artist\"\n          onChange={props.handleArtistChange}\n        />\n      </div>\n      {/* <div>\n        <label htmlFor=\"startDt\">Start Date:</label>\n        <DayPickerInput\n          id=\"startDt\"\n          onDayChange={props.handleStartDateChange}\n          formatDate={formatDate}\n          format=\"YYYY-MM-DD\"\n          parseDate={parseDate}\n          value={props.startDate}\n        />\n      </div>\n      <div>\n        <label htmlFor=\"endDt\">End Date:</label>\n        <DayPickerInput\n          id=\"endDt\"\n          onDayChange={props.handleEndDateChange}\n          formatDate={formatDate}\n          format=\"YYYY-MM-DD\"\n          parseDate={parseDate}\n          value={props.endDate}\n        />\n      </div> */}\n    </div>\n  );\n};\n\nexport default searchOptions;\n","import React from \"react\";\nimport \"./ArtistInfo.css\";\n\nconst artistInfo = props => {\n  let image,\n    info,\n    genre = null;\n  if (props.artistInfo) {\n    image = (\n      <img height=\"100\" src={props.artistInfo.images[0][100]} alt=\"Artist\" />\n    );\n    info = <h1>Artist Name: {props.artistInfo.name}</h1>;\n    genre = <h2>Genre: {props.artistInfo.genres.join(\" \")}</h2>;\n  }\n\n  return (\n    <div className=\"artist-info\">\n      {image}\n      <div style={{ textAlign: \"center\" }}>\n        {info}\n        {genre}\n      </div>\n    </div>\n  );\n};\n\nexport default artistInfo;\n","import React, { Component } from \"react\";\nimport * as d3 from \"d3\";\n\nclass Rect extends Component {\n  state = { x: null, y: null, width: null, height: null, fill: null };\n\n  static getDerivedStateFromProps(nextProps, prevState) {\n    if (!nextProps) return null;\n\n    return {\n      x: nextProps.x,\n      y: nextProps.y,\n      width: nextProps.width,\n      height: nextProps.height,\n      fill: nextProps.fill\n    };\n  }\n\n  componentDidUpdate() {\n    const { y, height } = this.state;\n\n    let rect;\n\n    //if log scale use yExtent, if not use linear scale from range 0\n    if (this.props.yExtent) {\n      rect = d3\n        .select(this.refs.rect)\n        .attr(\"y\", this.props.yScale(this.props.yExtent[0]));\n    } else {\n      rect = d3.select(this.refs.rect).attr(\"y\", this.props.yScale(0));\n    }\n\n    //set up bar transition\n    rect\n      .attr(\"height\", 0)\n      .transition()\n      .duration(800)\n      .attr(\"y\", y)\n      .attr(\"height\", height);\n  }\n\n  render() {\n    const { x, y, height, width, fill } = this.state;\n\n    return (\n      <rect ref=\"rect\" x={x} y={y} height={height} width={width} fill={fill} />\n    );\n  }\n}\n\nexport default Rect;\n","import React, { Component } from \"react\";\nimport Rect from \"../Rect/Rect\";\nimport * as d3 from \"d3\";\n\n//setting up global values for svg height and width\nconst margin = { left: 50, top: 20, right: 20, bottom: 50 };\nconst height = 500 - margin.top - margin.bottom;\nconst width = 700 - margin.left - margin.right;\n\nclass BarChart extends Component {\n  state = {\n    bars: [],\n    xScale: d3.scaleTime().range([0, width]),\n    yScale: d3.scaleLinear().range([height, 0]),\n    //yScale: d3.scaleLog().range([height, 0]),\n    wScale: d3\n      .scaleBand()\n      .range([0, width])\n      .paddingInner(0.1)\n      .paddingOuter(0),\n    accentScale: d3.scaleSequential(d3.interpolateRdBu),\n    yExtent: null\n  };\n\n  //setting up axis and tick formats\n  xAxis = d3.axisBottom(this.state.xScale).tickFormat(d3.timeFormat(\"%b-%Y\"));\n  yAxis = d3.axisLeft(this.state.yScale);\n  //.ticks(4)\n  //.tickFormat(function(d) {\n  // return d;\n  //});\n\n  static getDerivedStateFromProps(nextProps, prevState) {\n    if (!nextProps) return null;\n\n    const { data } = nextProps;\n    const { xScale, yScale, wScale, accentScale } = prevState;\n\n    //recalculate scales with new data\n    xScale.domain(d3.extent(data, d => d.date));\n    yScale.domain([0, d3.max(data, d => d.value)]);\n\n    //Below is yscale for log\n    //const yExtent = d3.extent(data, d => d.value);\n    //yScale.domain(d3.extent(data, d => d.value));\n\n    wScale.domain(data.map(d => d.date));\n    accentScale.domain([d3.max(data, d => d.value), 0]);\n\n    //create rect x and y values.\n    const bars = data.map(d => {\n      return {\n        x: xScale(d.date),\n        y: yScale(d.value),\n        height: height - yScale(d.value),\n        fill: accentScale(d.value)\n      };\n    });\n\n    return { bars, yScale };\n  }\n\n  //update axis when component updates\n  componentDidUpdate() {\n    d3.select(this.refs.xAxis)\n      .transition()\n      .duration(800)\n      .call(this.xAxis);\n    d3.select(this.refs.yAxis)\n      .transition()\n      .duration(800)\n      .call(this.yAxis);\n  }\n\n  render() {\n    return (\n      <svg\n        height={height + margin.top + margin.bottom}\n        width={width + margin.left + margin.right}\n      >\n        <g transform={`translate(${margin.left},${margin.top})`}>\n          {this.state.bars.map((d, i) => {\n            return (\n              <Rect\n                key={i}\n                x={d.x}\n                y={d.y}\n                height={d.height}\n                width={this.state.wScale.bandwidth()}\n                fill={d.fill}\n                yScale={this.state.yScale}\n                // yExtent={this.state.yExtent}\n              />\n            );\n          })}\n          <g ref=\"xAxis\" transform={`translate(0, ${height})`} />\n          <g ref=\"yAxis\" />\n        </g>\n      </svg>\n    );\n  }\n}\n\nexport default BarChart;\n","import React from \"react\";\nimport BarChart from \"../BarChart/BarChart\";\nimport Range from \"rc-slider/lib/Range\";\nimport \"rc-slider/assets/index.css\";\nimport \"./SocialMediaMetrics.css\";\n\nconst socialMediaMetrics = props => {\n  let barChart = null;\n  if (props.data) {\n    // populate barchart with data\n    barChart = (\n      <>\n        <BarChart data={props.data} />\n        <Range\n          className=\"range-slider\"\n          defaultValue={[0, 10]}\n          min={0}\n          max={10}\n          allowCross={false}\n          onChange={props.onRangeChange}\n        />\n      </>\n    );\n  }\n  return barChart;\n};\n\nexport default socialMediaMetrics;\n","import React, { Component } from \"react\";\nimport \"./App.css\";\nimport axios from \"axios\";\nimport debounce from \"lodash/debounce\";\nimport MetricViewBar from \"./components/MetricViewBar/MetricViewBar\";\nimport SearchOptions from \"./components/SearchOptions/SearchOptions\";\nimport ArtistInfo from \"./components/ArtistInfo/ArtistInfo\";\nimport SocialMediaMetrics from \"./components/SocialMediaMetrics/SocialMediaMetrics\";\nimport moment from \"moment\";\n\nclass App extends Component {\n  state = {\n    artist: \"\",\n    artistId: \"\",\n    artistInfo: null,\n    metrics: null,\n    metricMetadata: null,\n    metricId: 41,\n    startDate: moment(\"2018-01-01\").format(\"YYYY-MM-DD\"),\n    endDate: moment(\"2018-12-31\").format(\"YYYY-MM-DD\")\n  };\n\n  constructor() {\n    super();\n    this.emitDebouncedSearch = debounce(this.handleArtistSearch, 500);\n  }\n  //Search Artis Event Handlers\n  handleArtistChange = event => {\n    this.emitDebouncedSearch(event.target.value);\n  };\n  handleArtistSearch = val => {\n    this.setState({ artist: val });\n  };\n\n  componentDidMount() {\n    this.grabMetricMetadata();\n    if (this.state.artist) {\n      this.grabArtistMetric();\n      //this.grabArtistInfo();\n    }\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    //Only update artist data if new entry is not blank or different from prev entry\n    if (this.state.artist) {\n      if (this.state.artist !== prevState.artist) {\n        this.grabArtistMetric();\n        //this.grabArtistInfo();\n      }\n    }\n  }\n\n  //Grabs the metric meta data.\n  grabMetricMetadata() {\n    axios\n      .get(\"metrics/?fields=items.*\")\n      .then(response => {\n        this.setState({ metricMetadata: response.data });\n      })\n      .catch(error => console.log(error, \"grabMetricMetadata\"));\n  }\n\n  grabArtistMetric() {\n    axios\n      .get(`search/v1/artists/?query=${this.state.artist}&limit=1`)\n      .then(response => {\n        if (!response.data.artists.length) return null;\n        const artistInfo = response.data.artists[0];\n        this.setState({ artistId: artistInfo.id });\n        return axios.get(\n          `artists/${artistInfo.id}/data?metricIds=28,41,11,151,247&startDate=${\n            this.state.startDate\n          }&endDate=${this.state.endDate}&timeseries=totals,deltas`\n        );\n      })\n      .then(response => {\n        if (response) {\n          this.setState({\n            metrics: response.data,\n            metricId: response.data.data[0].metricId\n          });\n          //console.log(\"metrics\", response.data);\n          return this.grabArtistInfo();\n        }\n      })\n      .then(response => {\n        if (response) {\n          //console.log(\"artistinfo\", response.data);\n          this.setState({ artistInfo: response.data });\n        }\n      })\n      .catch(error => console.log(error, \"grabArtistMetric\"));\n  }\n\n  grabArtistInfo() {\n    return axios\n      .get(`artists/${this.state.artistId}/`)\n      .catch(error => console.log(error, \"grabArtistInfo\"));\n  }\n\n  handleStartDateChange = date => {\n    this.setState({\n      startDate: moment(date).format(\"YYYY-MM-DD\")\n    });\n  };\n\n  handleEndDateChange = date => {\n    this.setState({\n      endDate: moment(date).format(\"YYYY-MM-DD\")\n    });\n  };\n\n  //redo this. -AWOO\n  getChartData = id => {\n    console.log(this.state.metrics.data);\n    const dataArr = this.state.metrics.data.filter(item => {\n      return item.metricId === id;\n    });\n\n    //console.log(dataArr);\n\n    if (dataArr.length) {\n      let data;\n      if (id === 41 || id === 247) {\n        data = dataArr[0].timeseries.deltas;\n      } else {\n        data = dataArr[0].timeseries.totals;\n      }\n      const chartData = Object.keys(data).map(keys => {\n        return { date: new Date(keys), value: data[keys] };\n      });\n      //console.log(chartData);\n      return chartData;\n    }\n  };\n\n  handleMetricIdChange = id => {\n    if (this.state.metricId !== id) {\n      this.setState({ metricId: id });\n    }\n  };\n\n  onRangeChange = e => {\n    console.log(e);\n  };\n\n  render() {\n    let { artistInfo, metrics, metricId, metricMetadata } = this.state;\n    //initialize dom elements as nulls until artis data is retrieved.\n    let metricNames, data;\n\n    //create data only after metrics was fetched from API\n    if (metrics) {\n      data = this.getChartData(metricId);\n\n      //grab list of metric names.\n      metricNames = metrics.data\n        .reduce((acc, metric) => {\n          for (let m of metricMetadata.items) {\n            if (m.id === metric.metricId) {\n              acc.push({ fullName: m.fullName, id: m.id });\n              break;\n            }\n          }\n          return acc;\n        }, [])\n        .sort((a, b) => {\n          return a.id - b.id;\n        });\n    }\n\n    return (\n      <>\n        <div className=\"App\">\n          <SearchOptions handleArtistChange={this.handleArtistChange} />\n\n          <ArtistInfo artistInfo={artistInfo} />\n\n          <SocialMediaMetrics data={data} onRangeChang={this.onRangeChange} />\n\n          <MetricViewBar\n            clicked={this.handleMetricIdChange}\n            metricNames={metricNames}\n          />\n        </div>\n      </>\n    );\n  }\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport axios from \"axios\";\n\nconst publicKey = \"eb74a82009cbc53c9b44866743633f9d\";\n\naxios.defaults.baseURL = \"https://api.nextbigsound.com/\";\naxios.defaults.params = {};\naxios.defaults.params[\"access_token\"] = publicKey;\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n"],"sourceRoot":""}