{"version":3,"sources":["components/BarChart/BarChart.js","components/MetricViewBar/MetricViewBar.js","components/SearchOptions/SearchOptions.js","App.js","index.js"],"names":["width","height","margin","top","right","bottom","left","BarChart","state","bars","xScale","d3","range","yScale","xAxis","scale","_this","tickFormat","yAxis","d","this","refs","transition","duration","call","_this2","react_default","a","createElement","map","i","key","x","y","length","ref","transform","concat","nextProps","prevState","data","domain","date","value","Component","metricViewBar","props","buttons","metricNames","obj","id","onClick","clicked","bind","fullName","className","searchOptions","htmlFor","type","placeholder","onChange","handleArtistChange","DayPickerInput_default","onDayChange","handleStartDateChange","formatDate","format","parseDate","startDate","handleEndDateChange","endDate","App","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","artist","artistInfo","metrics","info","metricId","moment","event","emitDebouncedSearch","target","handleArtistSearch","val","setState","getChartData","dataArr","filter","item","timeseries","deltas","keys","Date","handleMetricIdChange","debounce","grabMetricInfo","grabArtistData","prevProps","axios","get","then","response","catch","error","console","log","_this3","artists","self","url","image","genre","barChart","_this4","src","images","alt","name","genres","join","components_BarChart_BarChart","reduce","acc","metric","_iteratorNormalCompletion","_didIteratorError","_iteratorError","undefined","_step","_iterator","items","Symbol","iterator","next","done","m","push","err","return","sort","b","Fragment","SearchOptions_SearchOptions","style","textAlign","MetricViewBar_MetricViewBar","defaults","baseURL","params","ReactDOM","render","src_App_0","document","getElementById"],"mappings":"kXAIMA,SAAQ,KACRC,EAAS,IACTC,EAAS,CAAEC,IAAK,GAAIC,MAAO,EAAGC,OAAQ,GAAIC,KAAM,IAgFvCC,6MA7EbC,MAAQ,CACNC,KAAM,GACNC,OAAQC,MAAeC,MAAM,CAACV,EAAOI,KAAMN,EAAQE,EAAOE,QAC1DS,OAAQF,MAAiBC,MAAM,CAACX,EAASC,EAAOG,OAAQH,EAAOC,SAIjEW,MAAQH,MAELI,MAAMC,EAAKR,MAAME,QACjBO,WAAWN,IAAc,YAC5BO,MAAQP,MAELI,MAAMC,EAAKR,MAAMK,QACjBI,WAAW,SAAAE,GACV,OAAOA,wFAyBTR,IAAUS,KAAKC,KAAKP,OACjBQ,aACAC,SAAS,KACTC,KAAKJ,KAAKN,OACbH,IAAUS,KAAKC,KAAKH,OACjBI,aACAC,SAAS,KACTC,KAAKJ,KAAKF,wCAGN,IAAAO,EAAAL,KACP,OACEM,EAAAC,EAAAC,cAAA,OAAK5B,MAAOA,EAAOC,OAAQA,GACxBmB,KAAKZ,MAAMC,KAAKoB,IAAI,SAACV,EAAGW,GACvB,OACEJ,EAAAC,EAAAC,cAAA,QACEG,IAAKD,EACLE,EAAGb,EAAEa,EACLC,EAAGd,EAAEc,EACLhC,OAAQkB,EAAElB,OACVD,MAAOA,EAAQyB,EAAKjB,MAAMC,KAAKyB,WAKrCR,EAAAC,EAAAC,cAAA,SACEF,EAAAC,EAAAC,cAAA,KACEO,IAAI,QACJC,UAAS,gBAAAC,OAAkBpC,EAASC,EAAOG,OAAlC,OAEXqB,EAAAC,EAAAC,cAAA,KAAGO,IAAI,QAAQC,UAAS,aAAAC,OAAenC,EAAOI,KAAtB,+DApDAgC,EAAWC,GACzC,IAAKD,EAAUE,KAAM,OAAO,KADwB,IAE5CA,EAASF,EAATE,KACA9B,EAAmB6B,EAAnB7B,OAAQG,EAAW0B,EAAX1B,OAehB,OAZAH,EAAO+B,OAAO9B,IAAU6B,EAAM,SAAArB,GAAC,OAAIA,EAAEuB,QACrC7B,EAAO4B,OAAO,CAAC,EAAG9B,IAAO6B,EAAM,SAAArB,GAAC,OAAIA,EAAEwB,UAW/B,CAAElC,KARI+B,EAAKX,IAAI,SAAAV,GACpB,MAAO,CACLa,EAAGtB,EAAOS,EAAEuB,MACZT,EAAGpB,EAAOM,EAAEwB,OACZ1C,OAAQA,EAASY,EAAOM,EAAEwB,OAASzC,EAAOG,kBAjC3BuC,aCWRC,SAhBO,SAAAC,GACpB,IAAIC,EAYJ,OAVID,EAAME,cACRD,EAAUD,EAAME,YAAYnB,IAAI,SAAAoB,GAC9B,OACEvB,EAAAC,EAAAC,cAAA,UAAQG,IAAKkB,EAAIC,GAAIC,QAASL,EAAMM,QAAQC,YAAWJ,EAAIC,KACxDD,EAAIK,aAMN5B,EAAAC,EAAAC,cAAA,OAAK2B,UAAU,mBAAmBR,qCC6B5BS,SAvCO,SAAAV,GACpB,OACEpB,EAAAC,EAAAC,cAAA,OAAK2B,UAAU,iBACb7B,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,SAAO6B,QAAQ,UAAf,WACA/B,EAAAC,EAAAC,cAAA,SACEsB,GAAG,SACHK,UAAU,oBACVG,KAAK,OACLC,YAAY,mBACZC,SAAUd,EAAMe,sBAGpBnC,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,SAAO6B,QAAQ,WAAf,eACA/B,EAAAC,EAAAC,cAACkC,EAAAnC,EAAD,CACEuB,GAAG,UACHa,YAAajB,EAAMkB,sBACnBC,WAAYA,aACZC,OAAO,aACPC,UAAWA,YACXxB,MAAOG,EAAMsB,aAGjB1C,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,SAAO6B,QAAQ,SAAf,aACA/B,EAAAC,EAAAC,cAACkC,EAAAnC,EAAD,CACEuB,GAAG,QACHa,YAAajB,EAAMuB,oBACnBJ,WAAYA,aACZC,OAAO,aACPC,UAAWA,YACXxB,MAAOG,EAAMwB,8BCyJRC,cA3Kb,SAAAA,IAAc,IAAAvD,EAAA,OAAAwD,OAAAC,EAAA,EAAAD,CAAApD,KAAAmD,IACZvD,EAAAwD,OAAAE,EAAA,EAAAF,CAAApD,KAAAoD,OAAAG,EAAA,EAAAH,CAAAD,GAAA/C,KAAAJ,QAXFZ,MAAQ,CACNoE,OAAQ,GACRC,WAAY,KACZC,QAAS,KACTC,KAAM,KACNC,SAAU,GACVZ,UAAWa,IAAO,cAAcf,OAAO,cACvCI,QAASW,IAAO,cAAcf,OAAO,eAGzBlD,EAsEd6C,mBAAqB,SAAAqB,GACnBlE,EAAKmE,oBAAoBD,EAAME,OAAOzC,QAvE1B3B,EA0EdqE,mBAAqB,SAAAC,GACnBtE,EAAKuE,SAAS,CAAEX,OAAQU,KA3EZtE,EA8EdgD,sBAAwB,SAAAtB,GACtB1B,EAAKuE,SAAS,CACZnB,UAAWa,IAAOvC,GAAMwB,OAAO,iBAhFrBlD,EAoFdqD,oBAAsB,SAAA3B,GACpB1B,EAAKuE,SAAS,CACZjB,QAASW,IAAOvC,GAAMwB,OAAO,iBAtFnBlD,EA0FdwE,aAAe,SAAAtC,GACb,IAAMuC,EAAUzE,EAAKR,MAAMsE,QAAQtC,KAAKkD,OAAO,SAAAC,GAC7C,OAAOA,EAAKX,WAAa9B,IAE3B,GAAIuC,EAAQvD,OAAQ,CAClB,IAAMM,EAAOiD,EAAQ,GAAGG,WAAWC,OAInC,OAHkBrB,OAAOsB,KAAKtD,GAAMX,IAAI,SAAAiE,GACtC,MAAO,CAAEpD,KAAM,IAAIqD,KAAKD,GAAOnD,MAAOH,EAAKsD,QAjGnC9E,EAuGdgF,qBAAuB,SAAA9C,GACrBlC,EAAKuE,SAAS,CAAEP,SAAU9B,KAtG1BlC,EAAKmE,oBAAsBc,IAASjF,EAAKqE,mBAAoB,KAFjDrE,mFAMZI,KAAK8E,iBACD9E,KAAKZ,MAAMoE,QACbxD,KAAK+E,4DAIUC,EAAW7D,GAExBnB,KAAKZ,MAAMoE,SACTxD,KAAKZ,MAAMoE,SAAWrC,EAAUqC,QAClCxD,KAAK+E,iBAEH/E,KAAKZ,MAAM4D,WAAahD,KAAKZ,MAAM8D,UAEnClD,KAAKZ,MAAM4D,YAAc7B,EAAU6B,WACnChD,KAAKZ,MAAM8D,UAAY/B,EAAU+B,SAEjClD,KAAK+E,4DAMI,IAAA1E,EAAAL,KACfiF,IACGC,IAAI,2BACJC,KAAK,SAAAC,GACJ/E,EAAK8D,SAAS,CAAER,KAAMyB,EAAShE,SAEhCiE,MAAM,SAAAC,GAAK,OAAIC,QAAQC,IAAIF,8CAGf,IAAAG,EAAAzF,KACfiF,IACGC,IADH,4BAAAjE,OACmCjB,KAAKZ,MAAMoE,OAD9C,aAEG2B,KAAK,SAAAC,GACJ,IAAKA,EAAShE,KAAKsE,QAAQ5E,OAAQ,OAAO,KAC1C,IAAM2C,EAAa2B,EAAShE,KAAKsE,QAAQ,GAEzC,OAAOT,IAAMC,IAAN,WAAAjE,OACMwC,EAAW3B,GADjB,+CAAAb,OAEHwE,EAAKrG,MAAM4D,UAFR,aAAA/B,OAGOwE,EAAKrG,MAAM8D,QAHlB,gCAMRiC,KAAK,SAAAC,GACJ,GAAIA,EAMF,OALAK,EAAKtB,SAAS,CACZT,QAAS0B,EAAShE,KAClBwC,SAAUwB,EAAShE,KAAKA,KAAK,GAAGwC,WAElC2B,QAAQC,IAAI,UAAWJ,EAAShE,MACzB6D,IAAMC,IAAIE,EAAShE,KAAKoC,OAAOmC,KAAKC,OAG9CT,KAAK,SAAAC,GACAA,IACFG,QAAQC,IAAI,aAAcJ,EAAShE,MACnCqE,EAAKtB,SAAS,CAAEV,WAAY2B,EAAShE,UAGxCiE,MAAM,SAAAC,GAAK,OAAIC,QAAQC,IAAIF,sCAwCvB,IAEHO,EAAOlC,EAAMmC,EAAOC,EAAUnE,EAF3BoE,EAAAhG,KAoCP,OAhCIA,KAAKZ,MAAMqE,aACboC,EACEvF,EAAAC,EAAAC,cAAA,OACE3B,OAAO,MACPoH,IAAKjG,KAAKZ,MAAMqE,WAAWyC,OAAO,GAAG,KACrCC,IAAI,WAGRxC,EAAOrD,EAAAC,EAAAC,cAAA,0BAAkBR,KAAKZ,MAAMqE,WAAW2C,MAC/CN,EAAQxF,EAAAC,EAAAC,cAAA,oBAAYR,KAAKZ,MAAMqE,WAAW4C,OAAOC,KAAK,OAGpDtG,KAAKZ,MAAMsE,UAEbqC,EAAWzF,EAAAC,EAAAC,cAAC+F,EAAD,CAAUnF,KAAMpB,KAAKoE,aAAapE,KAAKZ,MAAMwE,YAGxDhC,EAAc5B,KAAKZ,MAAMsE,QAAQtC,KAC9BoF,OAAO,SAACC,EAAKC,GAAW,IAAAC,GAAA,EAAAC,GAAA,EAAAC,OAAAC,EAAA,IACvB,QAAAC,EAAAC,EAAchB,EAAK5G,MAAMuE,KAAKsD,MAA9BC,OAAAC,cAAAR,GAAAI,EAAAC,EAAAI,QAAAC,MAAAV,GAAA,EAAqC,KAA5BW,EAA4BP,EAAAxF,MACnC,GAAI+F,EAAExF,KAAO4E,EAAO9C,SAAU,CAC5B6C,EAAIc,KAAK,CAAErF,SAAUoF,EAAEpF,SAAUJ,GAAIwF,EAAExF,KACvC,QAJmB,MAAA0F,GAAAZ,GAAA,EAAAC,EAAAW,EAAA,YAAAb,GAAA,MAAAK,EAAAS,QAAAT,EAAAS,SAAA,WAAAb,EAAA,MAAAC,GAOvB,OAAOJ,GACN,IACFiB,KAAK,SAACnH,EAAGoH,GACR,OAAOpH,EAAEuB,GAAK6F,EAAE7F,MAKpBxB,EAAAC,EAAAC,cAAAF,EAAAC,EAAAqH,SAAA,KACEtH,EAAAC,EAAAC,cAAA,OAAK2B,UAAU,OACb7B,EAAAC,EAAAC,cAACqH,EAAD,CACEpF,mBAAoBzC,KAAKyC,mBACzBG,sBAAuB5C,KAAK4C,sBAC5BK,oBAAqBjD,KAAKiD,oBAC1BD,UAAWhD,KAAKZ,MAAM4D,UACtBE,QAASlD,KAAKZ,MAAM8D,UAEtB5C,EAAAC,EAAAC,cAAA,OAAK2B,UAAU,eACZ0D,EACDvF,EAAAC,EAAAC,cAAA,OAAKsH,MAAO,CAAEC,UAAW,WACtBpE,EACAmC,IAGJC,EACDzF,EAAAC,EAAAC,cAACwH,EAAD,CACEhG,QAAShC,KAAK4E,qBACdhD,YAAaA,aA9KPJ,aCDlByD,IAAMgD,SAASC,QAAU,gCACzBjD,IAAMgD,SAASE,OAAS,GACxBlD,IAAMgD,SAASE,OAAf,aAJkB,mCAMlBC,IAASC,OAAO/H,EAAAC,EAAAC,cAAC8H,EAAD,MAASC,SAASC,eAAe","file":"static/js/main.b9593e28.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport * as d3 from \"d3\";\nimport \"./BarChart.css\";\n\nconst width = 700;\nconst height = 400;\nconst margin = { top: 20, right: 5, bottom: 20, left: 50 };\n\nclass BarChart extends Component {\n  state = {\n    bars: [],\n    xScale: d3.scaleTime().range([margin.left, width - margin.right]),\n    yScale: d3.scaleLinear().range([height - margin.bottom, margin.top])\n  };\n\n  //generate x and y axis for date and views.\n  xAxis = d3\n    .axisBottom()\n    .scale(this.state.xScale)\n    .tickFormat(d3.timeFormat(\"%b-%Y\"));\n  yAxis = d3\n    .axisLeft()\n    .scale(this.state.yScale)\n    .tickFormat(d => {\n      return d;\n    });\n\n  static getDerivedStateFromProps(nextProps, prevState) {\n    if (!nextProps.data) return null;\n    const { data } = nextProps;\n    const { xScale, yScale } = prevState;\n\n    //recalculate scale with new data\n    xScale.domain(d3.extent(data, d => d.date));\n    yScale.domain([0, d3.max(data, d => d.value)]);\n\n    //create rect x and y values.\n    const bars = data.map(d => {\n      return {\n        x: xScale(d.date),\n        y: yScale(d.value),\n        height: height - yScale(d.value) - margin.bottom\n      };\n    });\n\n    return { bars };\n  }\n\n  componentDidUpdate() {\n    d3.select(this.refs.xAxis)\n      .transition()\n      .duration(1000)\n      .call(this.xAxis);\n    d3.select(this.refs.yAxis)\n      .transition()\n      .duration(1000)\n      .call(this.yAxis);\n  }\n\n  render() {\n    return (\n      <svg width={width} height={height}>\n        {this.state.bars.map((d, i) => {\n          return (\n            <rect\n              key={i}\n              x={d.x}\n              y={d.y}\n              height={d.height}\n              width={width / this.state.bars.length}\n            />\n          );\n        })}\n\n        <g>\n          <g\n            ref=\"xAxis\"\n            transform={`translate(0, ${height - margin.bottom})`}\n          />\n          <g ref=\"yAxis\" transform={`translate(${margin.left}, 0)`} />\n        </g>\n      </svg>\n    );\n  }\n}\n\nexport default BarChart;\n","import React from \"react\";\nimport \"./MetricViewBar.css\";\n\nconst metricViewBar = props => {\n  let buttons;\n\n  if (props.metricNames) {\n    buttons = props.metricNames.map(obj => {\n      return (\n        <button key={obj.id} onClick={props.clicked.bind(this, obj.id)}>\n          {obj.fullName}\n        </button>\n      );\n    });\n  }\n\n  return <div className=\"metric-view-bar\">{buttons}</div>;\n};\n\nexport default metricViewBar;\n","import React from \"react\";\nimport DayPickerInput from \"react-day-picker/DayPickerInput\";\nimport \"react-day-picker/lib/style.css\";\nimport { formatDate, parseDate } from \"react-day-picker/moment\";\nimport \"./SearchOptions.css\";\n\nconst searchOptions = props => {\n  return (\n    <div className=\"SearchOptions\">\n      <div>\n        <label htmlFor=\"search\">Artist:</label>\n        <input\n          id=\"search\"\n          className=\"artistSearchInput\"\n          type=\"text\"\n          placeholder=\"Search An Artist\"\n          onChange={props.handleArtistChange}\n        />\n      </div>\n      <div>\n        <label htmlFor=\"startDt\">Start Date:</label>\n        <DayPickerInput\n          id=\"startDt\"\n          onDayChange={props.handleStartDateChange}\n          formatDate={formatDate}\n          format=\"YYYY-MM-DD\"\n          parseDate={parseDate}\n          value={props.startDate}\n        />\n      </div>\n      <div>\n        <label htmlFor=\"endDt\">End Date:</label>\n        <DayPickerInput\n          id=\"endDt\"\n          onDayChange={props.handleEndDateChange}\n          formatDate={formatDate}\n          format=\"YYYY-MM-DD\"\n          parseDate={parseDate}\n          value={props.endDate}\n        />\n      </div>\n    </div>\n  );\n};\n\nexport default searchOptions;\n","import React, { Component } from \"react\";\nimport \"./App.css\";\nimport axios from \"axios\";\nimport debounce from \"lodash/debounce\";\nimport BarChart from \"./components/BarChart/BarChart\";\nimport MetricViewBar from \"./components/MetricViewBar/MetricViewBar\";\nimport SearchOptions from \"./components/SearchOptions/SearchOptions\";\nimport moment from \"moment\";\n\nclass App extends Component {\n  state = {\n    artist: \"\",\n    artistInfo: null,\n    metrics: null,\n    info: null,\n    metricId: 41,\n    startDate: moment(\"2017-01-01\").format(\"YYYY-MM-DD\"),\n    endDate: moment(\"2017-12-31\").format(\"YYYY-MM-DD\")\n  };\n\n  constructor() {\n    super();\n    this.emitDebouncedSearch = debounce(this.handleArtistSearch, 500);\n  }\n\n  componentDidMount() {\n    this.grabMetricInfo();\n    if (this.state.artist) {\n      this.grabArtistData();\n    }\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    //Only update artist data if new entry is not blank or different from prev entry\n    if (this.state.artist) {\n      if (this.state.artist !== prevState.artist) {\n        this.grabArtistData();\n      }\n      if (this.state.startDate && this.state.endDate) {\n        if (\n          this.state.startDate !== prevState.startDate ||\n          this.state.endDate !== prevState.endDate\n        ) {\n          this.grabArtistData();\n        }\n      }\n    }\n  }\n\n  grabMetricInfo() {\n    axios\n      .get(\"metrics/?fields=items.*\")\n      .then(response => {\n        this.setState({ info: response.data });\n      })\n      .catch(error => console.log(error));\n  }\n\n  grabArtistData() {\n    axios\n      .get(`search/v1/artists/?query=${this.state.artist}&limit=1`)\n      .then(response => {\n        if (!response.data.artists.length) return null;\n        const artistInfo = response.data.artists[0];\n        //this.setState({ artistInfo: artistInfo });\n        return axios.get(\n          `artists/${artistInfo.id}/data?metricIds=28,41,11,151,247&startDate=${\n            this.state.startDate\n          }&endDate=${this.state.endDate}&timeseries=totals,deltas`\n        );\n      })\n      .then(response => {\n        if (response) {\n          this.setState({\n            metrics: response.data,\n            metricId: response.data.data[0].metricId\n          });\n          console.log(\"metrics\", response.data);\n          return axios.get(response.data.artist.self.url);\n        }\n      })\n      .then(response => {\n        if (response) {\n          console.log(\"artistinfo\", response.data);\n          this.setState({ artistInfo: response.data });\n        }\n      })\n      .catch(error => console.log(error));\n  }\n\n  handleArtistChange = event => {\n    this.emitDebouncedSearch(event.target.value);\n  };\n\n  handleArtistSearch = val => {\n    this.setState({ artist: val });\n  };\n\n  handleStartDateChange = date => {\n    this.setState({\n      startDate: moment(date).format(\"YYYY-MM-DD\")\n    });\n  };\n\n  handleEndDateChange = date => {\n    this.setState({\n      endDate: moment(date).format(\"YYYY-MM-DD\")\n    });\n  };\n\n  getChartData = id => {\n    const dataArr = this.state.metrics.data.filter(item => {\n      return item.metricId === id;\n    });\n    if (dataArr.length) {\n      const data = dataArr[0].timeseries.deltas;\n      const chartData = Object.keys(data).map(keys => {\n        return { date: new Date(keys), value: data[keys] };\n      });\n      return chartData;\n    }\n  };\n\n  handleMetricIdChange = id => {\n    this.setState({ metricId: id });\n  };\n\n  render() {\n    //initialize dom elements as nulls until artis data is retrieved.\n    let image, info, genre, barChart, metricNames;\n\n    if (this.state.artistInfo) {\n      image = (\n        <img\n          height=\"100\"\n          src={this.state.artistInfo.images[0][100]}\n          alt=\"Artist\"\n        />\n      );\n      info = <h1>Artist Name: {this.state.artistInfo.name}</h1>;\n      genre = <h2>Genre: {this.state.artistInfo.genres.join(\" \")}</h2>;\n    }\n\n    if (this.state.metrics) {\n      // populate barchart with data\n      barChart = <BarChart data={this.getChartData(this.state.metricId)} />;\n\n      //grab list of metric full names.\n      metricNames = this.state.metrics.data\n        .reduce((acc, metric) => {\n          for (let m of this.state.info.items) {\n            if (m.id === metric.metricId) {\n              acc.push({ fullName: m.fullName, id: m.id });\n              break;\n            }\n          }\n          return acc;\n        }, [])\n        .sort((a, b) => {\n          return a.id - b.id;\n        });\n    }\n\n    return (\n      <>\n        <div className=\"App\">\n          <SearchOptions\n            handleArtistChange={this.handleArtistChange}\n            handleStartDateChange={this.handleStartDateChange}\n            handleEndDateChange={this.handleEndDateChange}\n            startDate={this.state.startDate}\n            endDate={this.state.endDate}\n          />\n          <div className=\"artist-info\">\n            {image}\n            <div style={{ textAlign: \"center\" }}>\n              {info}\n              {genre}\n            </div>\n          </div>\n          {barChart}\n          <MetricViewBar\n            clicked={this.handleMetricIdChange}\n            metricNames={metricNames}\n          />\n        </div>\n      </>\n    );\n  }\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport axios from \"axios\";\n\nconst publicKey = \"eb74a82009cbc53c9b44866743633f9d\";\n\naxios.defaults.baseURL = \"https://api.nextbigsound.com/\";\naxios.defaults.params = {};\naxios.defaults.params[\"access_token\"] = publicKey;\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n"],"sourceRoot":""}